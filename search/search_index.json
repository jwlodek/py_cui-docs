{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A library for creating CUI/TUI interfaces with pre-built widgets in python. Easily build text-based user interfaces on both Linux and Windows. py_cui py_cui is a python library meant to simplify writing command line user interfaces in python. It is built upon the curses module, which is traditionally a unix-specific, however, you may use windows-curses to gain compatibility for py_cui on windows. The main advantage py_cui has over typical text-based user interface builders is that it relies on widgets and a grid layout manager like most traditional graphical user interfaces. You may define a grid size, and then drop predefined widgets onto it into specific grid locations. Widgets can also be stretched accross multiple grid rows and columns. If you've ever made a Tkinter GUI, you will feel right at home. Examples Below are some screenshots/gifs of programs written with py_cui. Additional (simpler) examples are available in the examples/ directory of this repository. py_cui_2048 - A command line version of the classic 2048 game py_cui_2048 is a demo of using py_cui to build simple CUI games and applications. The entire game was made in under 400 lines of code. unipkg - A command line utility that will allow for managing all installed package managers on your system through one cli interface unipkg is currently an in-progress project, check back in the future to see a screenshot, and more information. pyautogit - A command line interface for managing git repositories pyautogit is the first larger scale project written in py_cui . Feel free to use it as a guide to programming with py_cui . Powered by py_cui Below is a table of python projects developed with the help of py_cui . If you've made something, feel free to make a pull request to add it! Project Description pyautogit A command line UI for interfacing with git features for multiple repositories. py_cui_2048 A CUI version of the classic 2048 game. unipkg A CUI interface for managing all installed package managers on your system. (In-Progress) tinypub A console-based ebook reader. hue-tui A CUI controlling for Philips Hue lights. License BSD 3-Clause License Copyright (c) 2019-2020, Jakub Wlodek","title":"Home"},{"location":"#py_cui","text":"py_cui is a python library meant to simplify writing command line user interfaces in python. It is built upon the curses module, which is traditionally a unix-specific, however, you may use windows-curses to gain compatibility for py_cui on windows. The main advantage py_cui has over typical text-based user interface builders is that it relies on widgets and a grid layout manager like most traditional graphical user interfaces. You may define a grid size, and then drop predefined widgets onto it into specific grid locations. Widgets can also be stretched accross multiple grid rows and columns. If you've ever made a Tkinter GUI, you will feel right at home.","title":"py_cui"},{"location":"#examples","text":"Below are some screenshots/gifs of programs written with py_cui. Additional (simpler) examples are available in the examples/ directory of this repository. py_cui_2048 - A command line version of the classic 2048 game py_cui_2048 is a demo of using py_cui to build simple CUI games and applications. The entire game was made in under 400 lines of code. unipkg - A command line utility that will allow for managing all installed package managers on your system through one cli interface unipkg is currently an in-progress project, check back in the future to see a screenshot, and more information. pyautogit - A command line interface for managing git repositories pyautogit is the first larger scale project written in py_cui . Feel free to use it as a guide to programming with py_cui .","title":"Examples"},{"location":"#powered-by-py_cui","text":"Below is a table of python projects developed with the help of py_cui . If you've made something, feel free to make a pull request to add it! Project Description pyautogit A command line UI for interfacing with git features for multiple repositories. py_cui_2048 A CUI version of the classic 2048 game. unipkg A CUI interface for managing all installed package managers on your system. (In-Progress) tinypub A console-based ebook reader. hue-tui A CUI controlling for Philips Hue lights.","title":"Powered by py_cui"},{"location":"#license","text":"BSD 3-Clause License Copyright (c) 2019-2020, Jakub Wlodek","title":"License"},{"location":"about/","text":"About py_cui Primary Author Jakub Wlodek (jwlodek) Created on August 12, 2019 Contributing Authors Maciej Wlodek (maciejwlodek) Ellis Wright (telday) Aaron Pierce (aaronpierce) Caleb Reese (cptbldbrd) License BSD 3-Clause License Copyright (c) 2019 - 2020, Jakub Wlodek All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"About"},{"location":"about/#about-py_cui","text":"","title":"About py_cui"},{"location":"about/#primary-author","text":"Jakub Wlodek (jwlodek) Created on August 12, 2019","title":"Primary Author"},{"location":"about/#contributing-authors","text":"Maciej Wlodek (maciejwlodek) Ellis Wright (telday) Aaron Pierce (aaronpierce) Caleb Reese (cptbldbrd)","title":"Contributing Authors"},{"location":"about/#license","text":"BSD 3-Clause License Copyright (c) 2019 - 2020, Jakub Wlodek All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"colors/","text":"Using colors in a py_cui Colors in py_cui based interfaces are handled by widget level color choices, or by text color rules. In the case of widget coloring, you may use the Widget.set_color function, and pass in one of the supported color pairs. Color rules on the other hand are assigned to widgets, and relate to the text drawn within the widget. Supported Colors All colors in the py_cui library are represented as pairs, a foreground and background color. Below is a list of supported color pairs: Color Pair Foreground (Text) Color Background Color WHITE_ON_BLACK WHITE BLACK BLACK_ON_GREEN BLACK GREEN BLACK_ON_WHITE BLACK WHITE WHITE_ON_RED WHITE RED YELLOW_ON_BLACK YELLOW BLACK RED_ON_BLACK RED BLACK CYAN_ON_BLACK CYAN BLACK MAGENTA_ON_BLACK MAGENTA BLACK GREEN_ON_BLACK GREEN BLACK BLUE_ON_BLACK BLUE BLACK Using Color Rules There are several possible color rules that can be added to a py_cui widget, and these are classified under: Rule Type - How we attempt to match a text line with a given regular expression Match Type - How the resulting matched text is rendered Rule Types Rule Type Explanation startswith check if string starts with regex endswith check if string ends with regex notstartswith check if string doesn't start with regex notendswith check if string doesn't end with regex contains check if regex is contained within line Match Type Match Type Explanation line Color the entire line given color if matched region Color specified region if matched. For example a region of (0,3) would color the first 3 characters regex Color the matched regex only Examples self.text_block.add_text_color_rule('+', py_cui.GREEN_ON_BLACK, 'startswith') In the above example, all lines that start with a '+' symbol will be green. The default match type is line, meaning that the entire line will be colored in the event of a rule match. self.menu.add_text_color_rule('?', py_cui.GREEN_ON_BLACK, 'notstartswith', match_type='region', region=[0,3], include_whitespace=True) For this color rule, all lines that don't start with a ? will have their first three characters colored green. self.text_block.add_text_color_rule('@.*@', py_cui.CYAN_ON_BLACK, 'contains', match_type='regex') The above color rule will color all matches of @ ... @ cyan in the text of the textblock.","title":"Colors"},{"location":"colors/#using-colors-in-a-py_cui","text":"Colors in py_cui based interfaces are handled by widget level color choices, or by text color rules. In the case of widget coloring, you may use the Widget.set_color function, and pass in one of the supported color pairs. Color rules on the other hand are assigned to widgets, and relate to the text drawn within the widget.","title":"Using colors in a py_cui"},{"location":"colors/#supported-colors","text":"All colors in the py_cui library are represented as pairs, a foreground and background color. Below is a list of supported color pairs: Color Pair Foreground (Text) Color Background Color WHITE_ON_BLACK WHITE BLACK BLACK_ON_GREEN BLACK GREEN BLACK_ON_WHITE BLACK WHITE WHITE_ON_RED WHITE RED YELLOW_ON_BLACK YELLOW BLACK RED_ON_BLACK RED BLACK CYAN_ON_BLACK CYAN BLACK MAGENTA_ON_BLACK MAGENTA BLACK GREEN_ON_BLACK GREEN BLACK BLUE_ON_BLACK BLUE BLACK","title":"Supported Colors"},{"location":"colors/#using-color-rules","text":"There are several possible color rules that can be added to a py_cui widget, and these are classified under: Rule Type - How we attempt to match a text line with a given regular expression Match Type - How the resulting matched text is rendered Rule Types Rule Type Explanation startswith check if string starts with regex endswith check if string ends with regex notstartswith check if string doesn't start with regex notendswith check if string doesn't end with regex contains check if regex is contained within line Match Type Match Type Explanation line Color the entire line given color if matched region Color specified region if matched. For example a region of (0,3) would color the first 3 characters regex Color the matched regex only Examples self.text_block.add_text_color_rule('+', py_cui.GREEN_ON_BLACK, 'startswith') In the above example, all lines that start with a '+' symbol will be green. The default match type is line, meaning that the entire line will be colored in the event of a rule match. self.menu.add_text_color_rule('?', py_cui.GREEN_ON_BLACK, 'notstartswith', match_type='region', region=[0,3], include_whitespace=True) For this color rule, all lines that don't start with a ? will have their first three characters colored green. self.text_block.add_text_color_rule('@.*@', py_cui.CYAN_ON_BLACK, 'contains', match_type='regex') The above color rule will color all matches of @ ... @ cyan in the text of the textblock.","title":"Using Color Rules"},{"location":"developers/","text":"Documentation for py_cui Developers This page contains information on writing new widgets and popups, as well as anything else required for developers and contributors for py_cui. Developer tools There are several tools provided to py_cui developers to aid with debugging. Frst and formost is logging, which can be enabled with: root.enable_logging() To add log messages, you will need a logger object, which for most classes is passed from the root PyCUI instance. Once you have a logger, you can make it write messages with: logger.debug() logger.warn() logger.error() as is the case with the built in logging module. In addition, there are several shell/batch scripts included for auto-generating documentation from docstrings. Developers should run an appropriate script after completing a new feature with docstrings to ensure resulting markdown looks correct: cd docs/scripts bash generateFromDocstrings.sh for Linux/Mac users, and cd docs\\scripts generateFromDocstrings.bat for windows users. In the event that a new module was added with the changes, please add its generated markdown file to the mkdocs.yml configuration file in the root of this directory. For example, for the grid.py module, the autogenerated docs are added as follows: - Grid: DocstringGenerated/Grid.md Unit Tests py_cui unit tests are written for pytest . Make sure pytest is installed, and simply run pytest in the root directory to run all unit tests. Adding a new Widget We will walk through the steps of adding a new widget to py_cui (in this case a scroll menu) in order to demonstrate this process. Step One - Write an implementation To begin, we need to consider what we will need for our widget to do. For this, we will add a subclass to UIImplementation . We will add this subclass to py_cui/ui.py . In our case, for a scroll menu, we need to be able to scroll up and down, and we will need some variables to represent the current items, the selected item, and the viewport. We will also add some basic getter and setters for these variables. Below is the MenuImplementation class. note that it takes a logger object instance as a parameter that it passes to its UIImplementation superclass. class MenuImplementation(UIImplementation): def __init__(self, logger): super().__init__(logger) self._top_view = 0 self._selected_item = 0 self._view_items = [] def clear(self): self._view_items = [] self._selected_item = 0 self._top_view = 0 self._logger.debug('Clearing menu') def get_selected_item(self): return self._selected_item def set_selected_item(self, selected_item): self._selected_item = selected_item def _scroll_up(self): if self._top_view > 0 and self._selected_item == self._top_view: self._top_view = self._top_view - 1 if self._selected_item > 0: self._selected_item = self._selected_item - 1 self._logger.debug('Scrolling up to item {}'.format(self._selected_item)) def _scroll_down(self, viewport_height): if self._selected_item < len(self._view_items) - 1: self._selected_item = self._selected_item + 1 if self._selected_item > self._top_view + viewport_height: self._top_view = self._top_view + 1 self._logger.debug('Scrolling down to item {}'.format(self._selected_item)) def add_item(self, item_text): self._logger.debug('Adding item {} to menu'.format(item_text)) self._view_items.append(item_text) def add_item_list(self, item_list): self._logger.debug('Adding item list {} to menu'.format(str(item_list))) for item in item_list: self.add_item(item) def remove_selected_item(self): if len(self._view_items) == 0: return self._logger.debug('Removing {}'.format(self._view_items[self._selected_item])) del self._view_items[self._selected_item] if self._selected_item >= len(self._view_items): self._selected_item = self._selected_item - 1 def get_item_list(self): return self._view_items def get(self): if len(self._view_items) > 0: return self._view_items[self._selected_item] return None The reason we separate any widget ui-agnostic logic into a seperate class is because we want to reuse this logic if we wish to create other UI elements that share similar characteristics but are not widgets (ex. popups). Step Two - Extend the Widget Class Your next step when writing a new widget is to create a class in py_cui/widgets.py that extends the base Widget class, as well as the implementation class we just constructed. We call the superclass initializers, and we add override functions for _draw and _handle_key_press . For our ScrollMenu example: class ScrollMenu(Widget, py_cui.ui.MenuImplementation): def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger): Widget.__init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger) py_cui.ui.MenuImplementation.__init__(self, logger) def _handle_key_press(self, key_pressed): super().handle_key_press(key_pressed) def _draw(self): super().draw() The _handle_key_press and _draw functions must be extended for your new widget. You may leave the _handle_key_press as above, if you don't require any keybindings for the widget. The _draw function must extended, as the base class does no drawing itself, instead just setting up color rules. Step 3 - Add Key Bindings Next, add any default key bindings you wish to have for the widget when in focus mode. In the case of the scroll menu, we wish for the arrow keys to scroll up and down, so we extend the handle_key_press function: def _handle_key_press(self, key_pressed): super().handle_key_press(key_pressed) if key_pressed == py_cui.keys.KEY_UP_ARROW: self.scroll_up() if key_pressed == py_cui.keys.KEY_DOWN_ARROW: self.scroll_down() Note that the way default key bindings are added are simply if statements, which happen after the super() call. The _scroll_up() and _scroll_down() functions simply contain the logic for editing the viewport for the menu, and should have been implemented in the MenuImplementation superclass. Step 4 - implement the Draw function In the draw function, you must use the self._renderer object to render your widget to the screen. In our case, we want a border around the menu widget, and we also want to draw menu items that are within our viewport. The key renderer functions we will use are: self._renderer.draw_border(self) which will draw a border around the widget space, and self._renderer.draw_text(self, text, y_position) which will draw the text in the y_position. For our scroll menu, we would write the following: def _draw(self): super()._draw() self._renderer.set_color_mode(self._color) self._renderer.draw_border(self) counter = self._pady + 1 line_counter = 0 for line in self._view_items: if line_counter < self._top_view: line_counter = line_counter + 1 else: if counter >= self._height - self._pady - 1: break if line_counter == self._selected_item: self._renderer.draw_text(self, line, self._start_y + counter, selected=True) else: self._renderer.draw_text(self, line, self._start_y + counter) counter = counter + 1 line_counter = line_counter + 1 self._renderer.unset_color_mode(self._color) self._renderer.reset_cursor(self) Note that you should call super()._draw() and self._renderer.set_color_mode(self._color) at the start of the function (to initialize color modes), and self._renderer.unset_color_mode(self._color) and self._renderer.reset_cursor(self) to remove color settings, and place the cursor in the correct location. Step 5 - Add a function to PyCUI class to add the widget Finally, add a function to the PyCUI class in __init__.py that will add the widget to the CUI. In our case we write the following: def add_scroll_menu(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0): id = 'Widget{}'.format(len(self.get_widgets().keys())) new_scroll_menu = widgets.ScrollMenu( id, title, self._grid, row, column, row_span, column_span, padx, pady, self._logger) self.get_widgets()[id] = new_scroll_menu if self._selected_widget is None: self.set_selected_widget(id) self._logger.debug('Adding widget {} w/ ID {} of type {}'.format(title, id, str(type(new_scroll_menu)))) return new_scroll_menu The function must: Create an id titled 'Widget####' where #### is replaced with the number of widget Add the widget to the PyCUI widgets dict with the ID as a key If there is no selected widget, make this new widget the selected one Return a reference to the widget That's it! Your widget is now ready to be added to the CUI! Simply call the add function with appropriate parameters on the root PyCUI window: root.add_scroll_menu('Demo', 1, 1) Adding a new Popup This documentation section is incomplete. Feel free to expand me . Working on the renderer This documentation section is incomplete. Feel free to expand me . Working on color rules This documentation section is incomplete. Feel free to expand me .","title":"For PyCUI Developers"},{"location":"developers/#documentation-for-py_cui-developers","text":"This page contains information on writing new widgets and popups, as well as anything else required for developers and contributors for py_cui.","title":"Documentation for py_cui Developers"},{"location":"developers/#developer-tools","text":"There are several tools provided to py_cui developers to aid with debugging. Frst and formost is logging, which can be enabled with: root.enable_logging() To add log messages, you will need a logger object, which for most classes is passed from the root PyCUI instance. Once you have a logger, you can make it write messages with: logger.debug() logger.warn() logger.error() as is the case with the built in logging module. In addition, there are several shell/batch scripts included for auto-generating documentation from docstrings. Developers should run an appropriate script after completing a new feature with docstrings to ensure resulting markdown looks correct: cd docs/scripts bash generateFromDocstrings.sh for Linux/Mac users, and cd docs\\scripts generateFromDocstrings.bat for windows users. In the event that a new module was added with the changes, please add its generated markdown file to the mkdocs.yml configuration file in the root of this directory. For example, for the grid.py module, the autogenerated docs are added as follows: - Grid: DocstringGenerated/Grid.md","title":"Developer tools"},{"location":"developers/#unit-tests","text":"py_cui unit tests are written for pytest . Make sure pytest is installed, and simply run pytest in the root directory to run all unit tests.","title":"Unit Tests"},{"location":"developers/#adding-a-new-widget","text":"We will walk through the steps of adding a new widget to py_cui (in this case a scroll menu) in order to demonstrate this process. Step One - Write an implementation To begin, we need to consider what we will need for our widget to do. For this, we will add a subclass to UIImplementation . We will add this subclass to py_cui/ui.py . In our case, for a scroll menu, we need to be able to scroll up and down, and we will need some variables to represent the current items, the selected item, and the viewport. We will also add some basic getter and setters for these variables. Below is the MenuImplementation class. note that it takes a logger object instance as a parameter that it passes to its UIImplementation superclass. class MenuImplementation(UIImplementation): def __init__(self, logger): super().__init__(logger) self._top_view = 0 self._selected_item = 0 self._view_items = [] def clear(self): self._view_items = [] self._selected_item = 0 self._top_view = 0 self._logger.debug('Clearing menu') def get_selected_item(self): return self._selected_item def set_selected_item(self, selected_item): self._selected_item = selected_item def _scroll_up(self): if self._top_view > 0 and self._selected_item == self._top_view: self._top_view = self._top_view - 1 if self._selected_item > 0: self._selected_item = self._selected_item - 1 self._logger.debug('Scrolling up to item {}'.format(self._selected_item)) def _scroll_down(self, viewport_height): if self._selected_item < len(self._view_items) - 1: self._selected_item = self._selected_item + 1 if self._selected_item > self._top_view + viewport_height: self._top_view = self._top_view + 1 self._logger.debug('Scrolling down to item {}'.format(self._selected_item)) def add_item(self, item_text): self._logger.debug('Adding item {} to menu'.format(item_text)) self._view_items.append(item_text) def add_item_list(self, item_list): self._logger.debug('Adding item list {} to menu'.format(str(item_list))) for item in item_list: self.add_item(item) def remove_selected_item(self): if len(self._view_items) == 0: return self._logger.debug('Removing {}'.format(self._view_items[self._selected_item])) del self._view_items[self._selected_item] if self._selected_item >= len(self._view_items): self._selected_item = self._selected_item - 1 def get_item_list(self): return self._view_items def get(self): if len(self._view_items) > 0: return self._view_items[self._selected_item] return None The reason we separate any widget ui-agnostic logic into a seperate class is because we want to reuse this logic if we wish to create other UI elements that share similar characteristics but are not widgets (ex. popups). Step Two - Extend the Widget Class Your next step when writing a new widget is to create a class in py_cui/widgets.py that extends the base Widget class, as well as the implementation class we just constructed. We call the superclass initializers, and we add override functions for _draw and _handle_key_press . For our ScrollMenu example: class ScrollMenu(Widget, py_cui.ui.MenuImplementation): def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger): Widget.__init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger) py_cui.ui.MenuImplementation.__init__(self, logger) def _handle_key_press(self, key_pressed): super().handle_key_press(key_pressed) def _draw(self): super().draw() The _handle_key_press and _draw functions must be extended for your new widget. You may leave the _handle_key_press as above, if you don't require any keybindings for the widget. The _draw function must extended, as the base class does no drawing itself, instead just setting up color rules. Step 3 - Add Key Bindings Next, add any default key bindings you wish to have for the widget when in focus mode. In the case of the scroll menu, we wish for the arrow keys to scroll up and down, so we extend the handle_key_press function: def _handle_key_press(self, key_pressed): super().handle_key_press(key_pressed) if key_pressed == py_cui.keys.KEY_UP_ARROW: self.scroll_up() if key_pressed == py_cui.keys.KEY_DOWN_ARROW: self.scroll_down() Note that the way default key bindings are added are simply if statements, which happen after the super() call. The _scroll_up() and _scroll_down() functions simply contain the logic for editing the viewport for the menu, and should have been implemented in the MenuImplementation superclass. Step 4 - implement the Draw function In the draw function, you must use the self._renderer object to render your widget to the screen. In our case, we want a border around the menu widget, and we also want to draw menu items that are within our viewport. The key renderer functions we will use are: self._renderer.draw_border(self) which will draw a border around the widget space, and self._renderer.draw_text(self, text, y_position) which will draw the text in the y_position. For our scroll menu, we would write the following: def _draw(self): super()._draw() self._renderer.set_color_mode(self._color) self._renderer.draw_border(self) counter = self._pady + 1 line_counter = 0 for line in self._view_items: if line_counter < self._top_view: line_counter = line_counter + 1 else: if counter >= self._height - self._pady - 1: break if line_counter == self._selected_item: self._renderer.draw_text(self, line, self._start_y + counter, selected=True) else: self._renderer.draw_text(self, line, self._start_y + counter) counter = counter + 1 line_counter = line_counter + 1 self._renderer.unset_color_mode(self._color) self._renderer.reset_cursor(self) Note that you should call super()._draw() and self._renderer.set_color_mode(self._color) at the start of the function (to initialize color modes), and self._renderer.unset_color_mode(self._color) and self._renderer.reset_cursor(self) to remove color settings, and place the cursor in the correct location. Step 5 - Add a function to PyCUI class to add the widget Finally, add a function to the PyCUI class in __init__.py that will add the widget to the CUI. In our case we write the following: def add_scroll_menu(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0): id = 'Widget{}'.format(len(self.get_widgets().keys())) new_scroll_menu = widgets.ScrollMenu( id, title, self._grid, row, column, row_span, column_span, padx, pady, self._logger) self.get_widgets()[id] = new_scroll_menu if self._selected_widget is None: self.set_selected_widget(id) self._logger.debug('Adding widget {} w/ ID {} of type {}'.format(title, id, str(type(new_scroll_menu)))) return new_scroll_menu The function must: Create an id titled 'Widget####' where #### is replaced with the number of widget Add the widget to the PyCUI widgets dict with the ID as a key If there is no selected widget, make this new widget the selected one Return a reference to the widget That's it! Your widget is now ready to be added to the CUI! Simply call the add function with appropriate parameters on the root PyCUI window: root.add_scroll_menu('Demo', 1, 1)","title":"Adding a new Widget"},{"location":"developers/#adding-a-new-popup","text":"This documentation section is incomplete. Feel free to expand me .","title":"Adding a new Popup"},{"location":"developers/#working-on-the-renderer","text":"This documentation section is incomplete. Feel free to expand me .","title":"Working on the renderer"},{"location":"developers/#working-on-color-rules","text":"This documentation section is incomplete. Feel free to expand me .","title":"Working on color rules"},{"location":"examples/","text":"py_cui Examples There are several examples of simple py_cui programs you can find in the examples directory of the github repository. In addition, a larger python module pyautogit was written with py_cui , and is available for download using pip or from github. In this section of the documentation we will explain the source code for some of the supplied examples in more detail. Hello py_cui! As is tradition with programming, we start with our Hello World example. Here we simply create a PyCUI object with a grid size of 3 x 3, and we add a Label into the center grid space. This is the most basic py_cui you can create. # Import the lib import py_cui # create the CUI object. Will have a 3 by 3 grid with indexes from 0,0 to 2,2 root = py_cui.PyCUI(3,3) # Add a label to the center of the CUI in the 1,1 grid position root.add_label('Hello py_cui!!!', 1, 1) # Start/Render the CUI root.start() Simple Todo List A simple usage of py_cui for creating a terminal todo list. We use keybindings to get control of each of our lists as well as our text entry import py_cui class SimpleTodoList: def __init__(self, master): self.master = master # The scrolled list cells that will contain our tasks in each of the three categories self.todo_scroll_cell = self.master.add_scroll_menu('TODO', 0, 0, row_span=6, column_span=2) self.in_progress_scroll_cell = self.master.add_scroll_menu('In Progress', 0, 2, row_span=7, column_span=2) self.done_scroll_cell = self.master.add_scroll_menu('Done', 0, 4, row_span=7, column_span=2) # Textbox for entering new items self.new_todo_textbox = self.master.add_text_box('TODO Item', 6, 0, column_span=2) # Keybindings for controlling our CUI. # We bind the enter key for each of the widgets self.new_todo_textbox.add_key_command( py_cui.keys.KEY_ENTER, self.add_item) self.todo_scroll_cell.add_key_command( py_cui.keys.KEY_ENTER, self.mark_as_in_progress) self.in_progress_scroll_cell.add_key_command( py_cui.keys.KEY_ENTER, self.mark_as_done) self.done_scroll_cell.add_key_command( py_cui.keys.KEY_ENTER, self.remove_item) def add_item(self): \"\"\" Add a todo item \"\"\" self.todo_scroll_cell.add_item('{}'.format(self.new_todo_textbox.get())) self.new_todo_textbox.clear() def mark_as_in_progress(self): \"\"\" Mark a todo item as inprogress. Remove it from todo scroll list, add it to in progress list, or show error popup if no tasks \"\"\" in_prog = self.todo_scroll_cell.get() if in_prog is None: self.master.show_error_popup('No Item', 'There is no item in the list to mark as in progress') return self.todo_scroll_cell.remove_selected_item() self.in_progress_scroll_cell.add_item(in_prog) def mark_as_done(self): \"\"\" Mark a inprogress item as done. Remove it from inprogress scroll list, add it to done list, or show error popup if no tasks \"\"\" done = self.in_progress_scroll_cell.get() if done is None: self.master.show_error_popup('No Item', 'There is no item in the list to mark as done') return self.in_progress_scroll_cell.remove_selected_item() self.done_scroll_cell.add_item(done) def remove_item(self): \"\"\" Remove a todo item \"\"\" self.done_scroll_cell.remove_selected_item() # Create the CUI with 7 rows 6 columns, pass it to the wrapper object, and start it root = py_cui.PyCUI(7, 6) root.set_title('CUI TODO List') s = SimpleTodoList(root) root.start() Popups Example This example will demonstrate the usage for using all supported popups. # imports import py_cui import time import os import threading # We will need the threading library when we want to use the loading popups class PopupExample: def __init__(self, master): # This is a reference to our top level CUI object self.master = master # buttons for control - each simply spawns the linked popup self.show_message_popup = self.master.add_button('Show Message Popup', 0, 0, command=self.show_message) self.show_yes_no_popup = self.master.add_button('Show Yes No Popup', 1, 0, command=self.show_yes_no) self.show_loading_icon_popup = self.master.add_button('Show Loading Icon Popup', 2, 0, command=self.show_loading_icon) self.show_loading_bar_popup = self.master.add_button('Show Loading Bar Popup', 0,1, command = self.show_loading_bar) self.show_text_box_popup = self.master.add_button('Show Text Box Popup', 1,1, command = self.show_text_box) self.show_menu_popup = self.master.add_button('Show Scroll Menu Popup', 2,1, command = self.show_menu_popup_fun) def show_message(self): \"\"\" Displays a simple message popup \"\"\" self.master.show_message_popup('Hello!', 'This is a message popup. You can also spawn warnings and errors.') ################################################ # YES NO POPUP def quit_cui(self, to_quit): # THis is the function given to the yes no popup. The to_quit parameter will be true if y is pressed, or False if n is pressed if to_quit: exit() else: self.master.show_message_popup('Cancelled', 'The quit operation was cancelled.') def show_yes_no(self): \"\"\" Displays a yes no popup asking if the user would like to quit \"\"\" # For the yes/no popup, the 'command' parameter must take a function that requires a single boolean parameter self.master.show_yes_no_popup('Are you sure you want to quit?', self.quit_cui) ################################################ ################################################ # TEXTBOX POPUP def reset_title(self, new_title): self.master.set_title(new_title) def show_text_box(self): \"\"\" Displays a textbox popup asking the user for a new window title \"\"\" # A textbox popup requires a prompt and a function reference. The function must take a single string parameter that will return # whatever is within the text box when the ENTER key is pressed self.master.show_text_box_popup('Please enter a new window title', self.reset_title) ################################################ ################################################ # SCROLL MENU POPUP def change_button_color(self, new_color): \"\"\" Function called when ENTER pressed in menu popup. Takes string as parameter \"\"\" color = py_cui.WHITE_ON_BLACK if new_color == \"RED\": color = py_cui.RED_ON_BLACK elif new_color == \"CYAN\": color = py_cui.CYAN_ON_BLACK elif new_color == \"MAGENTA\": color = py_cui.MAGENTA_ON_BLACK for key in self.master.widgets.keys(): if isinstance(self.master.get_widgets()[key], py_cui.widgets.Button): self.master.get_widgets()[key].set_color(color) def show_menu_popup_fun(self): \"\"\" Opens scroll menu for selecting button colors \"\"\" # Spawning a menu popup must recieve a list of strings as menu options, and a function reference that takes a string parameter menu_choices = ['RED', 'CYAN', 'MAGENTA'] self.master.show_menu_popup('Please select a new button color', menu_choices, self.change_button_color) ################################################ def show_loading_icon(self): \"\"\" Function that shows the usage for spwaning a loading icon popup \"\"\" # The loading popup will remain onscreen until the stop loading function is called. Call this before a large operation, and call # stop after the operation is finished. Note that for these long operations, you must use a different thread # to not block the draw calls. self.master.show_loading_icon_popup('Please Wait', 'Loading') operation_thread = threading.Thread(target=self.long_operation) operation_thread.start() def show_loading_bar(self): \"\"\" Function that shows the usage for spawning a loading bar popup \"\"\" self.master.show_loading_bar_popup('Incrementing a counter...', 100) operation_thread = threading.Thread(target=self.long_operation) operation_thread.start() def long_operation(self): \"\"\" A simple function that demonstrates a long callback operation performed while loading popup is open \"\"\" counter = 0 for i in range(0, 100): time.sleep(0.1) counter= counter +1 self.master.status_bar.set_text(str(counter)) # When using a bar indicator, we will increment the completed counter. Will be ignored for loading icon popup self.master.increment_loading_bar() # This is what stops the loading popup and reenters overview mode self.master.stop_loading_popup() # Create the CUI, pass it to the wrapper object, and start it root = py_cui.PyCUI(3, 2) root.set_title('CUI Popups Example') s = PopupExample(root) root.start() Other examples Other examples are available in the examples directory in the repository on github. For a larger example of a project using py_cui , see pyautogit .","title":"Examples"},{"location":"examples/#py_cui-examples","text":"There are several examples of simple py_cui programs you can find in the examples directory of the github repository. In addition, a larger python module pyautogit was written with py_cui , and is available for download using pip or from github. In this section of the documentation we will explain the source code for some of the supplied examples in more detail.","title":"py_cui Examples"},{"location":"examples/#hello-py_cui","text":"As is tradition with programming, we start with our Hello World example. Here we simply create a PyCUI object with a grid size of 3 x 3, and we add a Label into the center grid space. This is the most basic py_cui you can create. # Import the lib import py_cui # create the CUI object. Will have a 3 by 3 grid with indexes from 0,0 to 2,2 root = py_cui.PyCUI(3,3) # Add a label to the center of the CUI in the 1,1 grid position root.add_label('Hello py_cui!!!', 1, 1) # Start/Render the CUI root.start()","title":"Hello py_cui!"},{"location":"examples/#simple-todo-list","text":"A simple usage of py_cui for creating a terminal todo list. We use keybindings to get control of each of our lists as well as our text entry import py_cui class SimpleTodoList: def __init__(self, master): self.master = master # The scrolled list cells that will contain our tasks in each of the three categories self.todo_scroll_cell = self.master.add_scroll_menu('TODO', 0, 0, row_span=6, column_span=2) self.in_progress_scroll_cell = self.master.add_scroll_menu('In Progress', 0, 2, row_span=7, column_span=2) self.done_scroll_cell = self.master.add_scroll_menu('Done', 0, 4, row_span=7, column_span=2) # Textbox for entering new items self.new_todo_textbox = self.master.add_text_box('TODO Item', 6, 0, column_span=2) # Keybindings for controlling our CUI. # We bind the enter key for each of the widgets self.new_todo_textbox.add_key_command( py_cui.keys.KEY_ENTER, self.add_item) self.todo_scroll_cell.add_key_command( py_cui.keys.KEY_ENTER, self.mark_as_in_progress) self.in_progress_scroll_cell.add_key_command( py_cui.keys.KEY_ENTER, self.mark_as_done) self.done_scroll_cell.add_key_command( py_cui.keys.KEY_ENTER, self.remove_item) def add_item(self): \"\"\" Add a todo item \"\"\" self.todo_scroll_cell.add_item('{}'.format(self.new_todo_textbox.get())) self.new_todo_textbox.clear() def mark_as_in_progress(self): \"\"\" Mark a todo item as inprogress. Remove it from todo scroll list, add it to in progress list, or show error popup if no tasks \"\"\" in_prog = self.todo_scroll_cell.get() if in_prog is None: self.master.show_error_popup('No Item', 'There is no item in the list to mark as in progress') return self.todo_scroll_cell.remove_selected_item() self.in_progress_scroll_cell.add_item(in_prog) def mark_as_done(self): \"\"\" Mark a inprogress item as done. Remove it from inprogress scroll list, add it to done list, or show error popup if no tasks \"\"\" done = self.in_progress_scroll_cell.get() if done is None: self.master.show_error_popup('No Item', 'There is no item in the list to mark as done') return self.in_progress_scroll_cell.remove_selected_item() self.done_scroll_cell.add_item(done) def remove_item(self): \"\"\" Remove a todo item \"\"\" self.done_scroll_cell.remove_selected_item() # Create the CUI with 7 rows 6 columns, pass it to the wrapper object, and start it root = py_cui.PyCUI(7, 6) root.set_title('CUI TODO List') s = SimpleTodoList(root) root.start()","title":"Simple Todo List"},{"location":"examples/#popups-example","text":"This example will demonstrate the usage for using all supported popups. # imports import py_cui import time import os import threading # We will need the threading library when we want to use the loading popups class PopupExample: def __init__(self, master): # This is a reference to our top level CUI object self.master = master # buttons for control - each simply spawns the linked popup self.show_message_popup = self.master.add_button('Show Message Popup', 0, 0, command=self.show_message) self.show_yes_no_popup = self.master.add_button('Show Yes No Popup', 1, 0, command=self.show_yes_no) self.show_loading_icon_popup = self.master.add_button('Show Loading Icon Popup', 2, 0, command=self.show_loading_icon) self.show_loading_bar_popup = self.master.add_button('Show Loading Bar Popup', 0,1, command = self.show_loading_bar) self.show_text_box_popup = self.master.add_button('Show Text Box Popup', 1,1, command = self.show_text_box) self.show_menu_popup = self.master.add_button('Show Scroll Menu Popup', 2,1, command = self.show_menu_popup_fun) def show_message(self): \"\"\" Displays a simple message popup \"\"\" self.master.show_message_popup('Hello!', 'This is a message popup. You can also spawn warnings and errors.') ################################################ # YES NO POPUP def quit_cui(self, to_quit): # THis is the function given to the yes no popup. The to_quit parameter will be true if y is pressed, or False if n is pressed if to_quit: exit() else: self.master.show_message_popup('Cancelled', 'The quit operation was cancelled.') def show_yes_no(self): \"\"\" Displays a yes no popup asking if the user would like to quit \"\"\" # For the yes/no popup, the 'command' parameter must take a function that requires a single boolean parameter self.master.show_yes_no_popup('Are you sure you want to quit?', self.quit_cui) ################################################ ################################################ # TEXTBOX POPUP def reset_title(self, new_title): self.master.set_title(new_title) def show_text_box(self): \"\"\" Displays a textbox popup asking the user for a new window title \"\"\" # A textbox popup requires a prompt and a function reference. The function must take a single string parameter that will return # whatever is within the text box when the ENTER key is pressed self.master.show_text_box_popup('Please enter a new window title', self.reset_title) ################################################ ################################################ # SCROLL MENU POPUP def change_button_color(self, new_color): \"\"\" Function called when ENTER pressed in menu popup. Takes string as parameter \"\"\" color = py_cui.WHITE_ON_BLACK if new_color == \"RED\": color = py_cui.RED_ON_BLACK elif new_color == \"CYAN\": color = py_cui.CYAN_ON_BLACK elif new_color == \"MAGENTA\": color = py_cui.MAGENTA_ON_BLACK for key in self.master.widgets.keys(): if isinstance(self.master.get_widgets()[key], py_cui.widgets.Button): self.master.get_widgets()[key].set_color(color) def show_menu_popup_fun(self): \"\"\" Opens scroll menu for selecting button colors \"\"\" # Spawning a menu popup must recieve a list of strings as menu options, and a function reference that takes a string parameter menu_choices = ['RED', 'CYAN', 'MAGENTA'] self.master.show_menu_popup('Please select a new button color', menu_choices, self.change_button_color) ################################################ def show_loading_icon(self): \"\"\" Function that shows the usage for spwaning a loading icon popup \"\"\" # The loading popup will remain onscreen until the stop loading function is called. Call this before a large operation, and call # stop after the operation is finished. Note that for these long operations, you must use a different thread # to not block the draw calls. self.master.show_loading_icon_popup('Please Wait', 'Loading') operation_thread = threading.Thread(target=self.long_operation) operation_thread.start() def show_loading_bar(self): \"\"\" Function that shows the usage for spawning a loading bar popup \"\"\" self.master.show_loading_bar_popup('Incrementing a counter...', 100) operation_thread = threading.Thread(target=self.long_operation) operation_thread.start() def long_operation(self): \"\"\" A simple function that demonstrates a long callback operation performed while loading popup is open \"\"\" counter = 0 for i in range(0, 100): time.sleep(0.1) counter= counter +1 self.master.status_bar.set_text(str(counter)) # When using a bar indicator, we will increment the completed counter. Will be ignored for loading icon popup self.master.increment_loading_bar() # This is what stops the loading popup and reenters overview mode self.master.stop_loading_popup() # Create the CUI, pass it to the wrapper object, and start it root = py_cui.PyCUI(3, 2) root.set_title('CUI Popups Example') s = PopupExample(root) root.start()","title":"Popups Example"},{"location":"examples/#other-examples","text":"Other examples are available in the examples directory in the repository on github. For a larger example of a project using py_cui , see pyautogit .","title":"Other examples"},{"location":"install/","text":"PyCUI Installation The easiest way to install py_cui is to use pip . You may simply run: pip install py_cui and the library should install along with all dependancies. If you are working on a machine where pip defaults to the Python 2 version, replace pip with pip3 . There is no Python 2 support for py_cui , you will need a version of Python 3.4+ in order to use it. It may function with lower versions of Python 3, but it has not been tested on them. Alternatively, if you wish to avoid using pip, you may install from this repository: git clone https://github.com/jwlodek/py_cui cd py_cui pip install . This will use pip to install from the sources in the git repository. If you wish to avoid installing altogether, you may copy an example from the examples/ directory into the root py_cui directory, and run it with python3. Note that in this case you are required to install the dependancies yourself, which are curses on UNIX (should be included with python3) and windows-curses on windows, which can be installed with pip . Developer Installation Additional packages can be used by py_cui developers to help with debugging and other issues. For these, you may use pip: pip install -r requirements_dev.txt It is also recommended to use a virtual environment to develop py_cui : mkdir venv cd venv python3 -m venv . source bin/activate Development packages are as follows: Package Used For pytest Unit testing pytest-cov Code coverage stats flake8 Style checking npdoc2md Docstring to Markdown documentation auto-conversion Running Examples To run examples, install py_cui, enter the examples/ directory, and run them with python3. For example, to run todo_list_example.py : cd examples python3 todo_list_example.py Feel free to take a look at the Examples section of this documentation for more details.","title":"Installation"},{"location":"install/#pycui-installation","text":"The easiest way to install py_cui is to use pip . You may simply run: pip install py_cui and the library should install along with all dependancies. If you are working on a machine where pip defaults to the Python 2 version, replace pip with pip3 . There is no Python 2 support for py_cui , you will need a version of Python 3.4+ in order to use it. It may function with lower versions of Python 3, but it has not been tested on them. Alternatively, if you wish to avoid using pip, you may install from this repository: git clone https://github.com/jwlodek/py_cui cd py_cui pip install . This will use pip to install from the sources in the git repository. If you wish to avoid installing altogether, you may copy an example from the examples/ directory into the root py_cui directory, and run it with python3. Note that in this case you are required to install the dependancies yourself, which are curses on UNIX (should be included with python3) and windows-curses on windows, which can be installed with pip .","title":"PyCUI Installation"},{"location":"install/#developer-installation","text":"Additional packages can be used by py_cui developers to help with debugging and other issues. For these, you may use pip: pip install -r requirements_dev.txt It is also recommended to use a virtual environment to develop py_cui : mkdir venv cd venv python3 -m venv . source bin/activate Development packages are as follows: Package Used For pytest Unit testing pytest-cov Code coverage stats flake8 Style checking npdoc2md Docstring to Markdown documentation auto-conversion","title":"Developer Installation"},{"location":"install/#running-examples","text":"To run examples, install py_cui, enter the examples/ directory, and run them with python3. For example, to run todo_list_example.py : cd examples python3 todo_list_example.py Feel free to take a look at the Examples section of this documentation for more details.","title":"Running Examples"},{"location":"keybindings/","text":"Keybindings Almost all CUI elements in py_cui support some degree of keybindings. The order in which these keybindings are executed depend on the order they are added, however, user keybindings are always executed prior to default keybindings, so make sure you don't unintentionally override an already bound key. Lists of default keybindings for each widget are available in the Widgets section of this documentation, and a list of default keybindings for overview mode is found in the Usage section. Adding a Keybinding For all keybindings, you must pass a py_cui key and a function with no arguments. This function will be fired when the key bound to it is detected. The function may also be a class funciton, with self.FUNCTION being passed into the add keybinding function. Make sure to take a look at the examples for more uses of keybindings. Overview Mode To add a keybinding to overview mode, you need to add it to the PyCUI object itself. For example, if I wanted to add a binding for the c key to clear all text fields in my cui : # import the library import py_cui # Create the PyCUI and add a text field root = py_cui.PyCUI(3, 3) text_field = root.add_text_box('Text Field', 1, 1) # This function simply clears the text in the text field def clear_text_field(): text_field.clear() # Add the key binding to the PyCUI object itself for overview mode. root.add_key_command(py_cui.keys.KEY_C_LOWER, clear_text_field) # Start the CUI root.start() Focus Mode Adding keybindings to focus mode is done at a widget by widget basis. When a widget is added to the PyCUI , the returned object is used to add a key command. Once again, make sure to check default key bindings that should only be overridden if the user specifically desires to replace their functionality. For example, in a menu widget, if we wish to set the window title to the selected menu item with the t key, we could write the following: # import the library import py_cui # Create the CUI object root = py_cui.PyCUI(3,3) # Add the scroll menu with the three menu items menu_items = ['Item1', 'Item2', 'Item3'] menu = root.add_scroll_menu('Test Menu', 1, 1) menu.add_item_list(menu_items) # Function that sets the root window title def set_title_from_menu(): root.set_title(menu.get()) # Bind the 't' key to the above function menu.add_key_command(py_cui.keys.KEY_T_LOWER, set_title_from_menu) # start the CUI root.start() Supported Keys Below is a table of all keys supported by py_cui . Each key is accessed within your program with py_cui.keys.YOUR_KEY_CODE . There are some differences in the way keycodes are handled on win32 vs. UNIX, though this is abstracted away by py_cui. Key Code Key Presses KEY_ENTER Enter (newline) Key KEY_ESCAPE Escape Key KEY_SPACE Space Key KEY_DELETE Delete Key KEY_TAB Tab Key KEY_UP_ARROW Up Arrow Key KEY_DOWN_ARROW Down Arrow Key KEY_LEFT_ARROW Left Arrow Key KEY_RIGHT_ARROW Right Arrow Key KEY_PAGE_UP Page Up Key KEY_PAGE_DOWN Page Down Key KEY_F1 F1 Function Key KEY_F2 F2 Function Key KEY_F3 F3 Function Key KEY_F4 F4 Function Key KEY_F5 F5 Function Key KEY_F6 F6 Function Key KEY_F7 F7 Function Key KEY_F8 F8 Function Key KEY_HOME Home Key KEY_END End Key KEY_A_LOWER a Key KEY_B_LOWER b Key KEY_C_LOWER c Key KEY_D_LOWER d Key KEY_E_LOWER e Key KEY_F_LOWER f Key KEY_G_LOWER g Key KEY_H_LOWER h Key KEY_I_LOWER i Key KEY_J_LOWER j Key KEY_K_LOWER k Key KEY_L_LOWER l Key KEY_M_LOWER m Key KEY_N_LOWER n Key KEY_O_LOWER o Key KEY_P_LOWER p Key KEY_Q_LOWER q Key KEY_R_LOWER r Key KEY_S_LOWER s Key KEY_T_LOWER t Key KEY_U_LOWER u Key KEY_V_LOWER v Key KEY_W_LOWER w Key KEY_X_LOWER x Key KEY_Y_LOWER y Key KEY_Z_LOWER z Key KEY_A_UPPER a Key + Shift Key KEY_B_UPPER b Key + Shift Key KEY_C_UPPER c Key + Shift Key KEY_D_UPPER d Key + Shift Key KEY_E_UPPER e Key + Shift Key KEY_F_UPPER f Key + Shift Key KEY_G_UPPER g Key + Shift Key KEY_H_UPPER h Key + Shift Key KEY_I_UPPER i Key + Shift Key KEY_J_UPPER j Key + Shift Key KEY_K_UPPER k Key + Shift Key KEY_L_UPPER l Key + Shift Key KEY_M_UPPER m Key + Shift Key KEY_N_UPPER n Key + Shift Key KEY_O_UPPER o Key + Shift Key KEY_P_UPPER p Key + Shift Key KEY_Q_UPPER q Key + Shift Key KEY_R_UPPER r Key + Shift Key KEY_S_UPPER s Key + Shift Key KEY_T_UPPER t Key + Shift Key KEY_U_UPPER u Key + Shift Key KEY_V_UPPER v Key + Shift Key KEY_W_UPPER w Key + Shift Key KEY_X_UPPER x Key + Shift Key KEY_Y_UPPER y Key + Shift Key KEY_Z_UPPER z Key + Shift Key KEY_BACKSPACE Backspace Key","title":"Keys"},{"location":"keybindings/#keybindings","text":"Almost all CUI elements in py_cui support some degree of keybindings. The order in which these keybindings are executed depend on the order they are added, however, user keybindings are always executed prior to default keybindings, so make sure you don't unintentionally override an already bound key. Lists of default keybindings for each widget are available in the Widgets section of this documentation, and a list of default keybindings for overview mode is found in the Usage section.","title":"Keybindings"},{"location":"keybindings/#adding-a-keybinding","text":"For all keybindings, you must pass a py_cui key and a function with no arguments. This function will be fired when the key bound to it is detected. The function may also be a class funciton, with self.FUNCTION being passed into the add keybinding function. Make sure to take a look at the examples for more uses of keybindings. Overview Mode To add a keybinding to overview mode, you need to add it to the PyCUI object itself. For example, if I wanted to add a binding for the c key to clear all text fields in my cui : # import the library import py_cui # Create the PyCUI and add a text field root = py_cui.PyCUI(3, 3) text_field = root.add_text_box('Text Field', 1, 1) # This function simply clears the text in the text field def clear_text_field(): text_field.clear() # Add the key binding to the PyCUI object itself for overview mode. root.add_key_command(py_cui.keys.KEY_C_LOWER, clear_text_field) # Start the CUI root.start() Focus Mode Adding keybindings to focus mode is done at a widget by widget basis. When a widget is added to the PyCUI , the returned object is used to add a key command. Once again, make sure to check default key bindings that should only be overridden if the user specifically desires to replace their functionality. For example, in a menu widget, if we wish to set the window title to the selected menu item with the t key, we could write the following: # import the library import py_cui # Create the CUI object root = py_cui.PyCUI(3,3) # Add the scroll menu with the three menu items menu_items = ['Item1', 'Item2', 'Item3'] menu = root.add_scroll_menu('Test Menu', 1, 1) menu.add_item_list(menu_items) # Function that sets the root window title def set_title_from_menu(): root.set_title(menu.get()) # Bind the 't' key to the above function menu.add_key_command(py_cui.keys.KEY_T_LOWER, set_title_from_menu) # start the CUI root.start()","title":"Adding a Keybinding"},{"location":"keybindings/#supported-keys","text":"Below is a table of all keys supported by py_cui . Each key is accessed within your program with py_cui.keys.YOUR_KEY_CODE . There are some differences in the way keycodes are handled on win32 vs. UNIX, though this is abstracted away by py_cui. Key Code Key Presses KEY_ENTER Enter (newline) Key KEY_ESCAPE Escape Key KEY_SPACE Space Key KEY_DELETE Delete Key KEY_TAB Tab Key KEY_UP_ARROW Up Arrow Key KEY_DOWN_ARROW Down Arrow Key KEY_LEFT_ARROW Left Arrow Key KEY_RIGHT_ARROW Right Arrow Key KEY_PAGE_UP Page Up Key KEY_PAGE_DOWN Page Down Key KEY_F1 F1 Function Key KEY_F2 F2 Function Key KEY_F3 F3 Function Key KEY_F4 F4 Function Key KEY_F5 F5 Function Key KEY_F6 F6 Function Key KEY_F7 F7 Function Key KEY_F8 F8 Function Key KEY_HOME Home Key KEY_END End Key KEY_A_LOWER a Key KEY_B_LOWER b Key KEY_C_LOWER c Key KEY_D_LOWER d Key KEY_E_LOWER e Key KEY_F_LOWER f Key KEY_G_LOWER g Key KEY_H_LOWER h Key KEY_I_LOWER i Key KEY_J_LOWER j Key KEY_K_LOWER k Key KEY_L_LOWER l Key KEY_M_LOWER m Key KEY_N_LOWER n Key KEY_O_LOWER o Key KEY_P_LOWER p Key KEY_Q_LOWER q Key KEY_R_LOWER r Key KEY_S_LOWER s Key KEY_T_LOWER t Key KEY_U_LOWER u Key KEY_V_LOWER v Key KEY_W_LOWER w Key KEY_X_LOWER x Key KEY_Y_LOWER y Key KEY_Z_LOWER z Key KEY_A_UPPER a Key + Shift Key KEY_B_UPPER b Key + Shift Key KEY_C_UPPER c Key + Shift Key KEY_D_UPPER d Key + Shift Key KEY_E_UPPER e Key + Shift Key KEY_F_UPPER f Key + Shift Key KEY_G_UPPER g Key + Shift Key KEY_H_UPPER h Key + Shift Key KEY_I_UPPER i Key + Shift Key KEY_J_UPPER j Key + Shift Key KEY_K_UPPER k Key + Shift Key KEY_L_UPPER l Key + Shift Key KEY_M_UPPER m Key + Shift Key KEY_N_UPPER n Key + Shift Key KEY_O_UPPER o Key + Shift Key KEY_P_UPPER p Key + Shift Key KEY_Q_UPPER q Key + Shift Key KEY_R_UPPER r Key + Shift Key KEY_S_UPPER s Key + Shift Key KEY_T_UPPER t Key + Shift Key KEY_U_UPPER u Key + Shift Key KEY_V_UPPER v Key + Shift Key KEY_W_UPPER w Key + Shift Key KEY_X_UPPER x Key + Shift Key KEY_Y_UPPER y Key + Shift Key KEY_Z_UPPER z Key + Shift Key KEY_BACKSPACE Backspace Key","title":"Supported Keys"},{"location":"popups/","text":"Popups This page contains information regarding all popups supported by py_cui . Please see the popups_example.py in the examples/ directory in the repository. Message/Warning/Error Popup Spawn Command show_message_popup(title, text) show_warning_popup(title, text) show_error_popup(title, text) Usage Used to show a simple message, with a different color depending on warning level. Keys Exit from the popup with KEY_ENTER , KEY_ESCAPE , or KEY_SPACE . Yes/No Popup Spawn Command show_yes_no_popup(self, title, command) Usage Ask user yes/no question. The command parameter passed to the spawn function must be a function that takes a single boolean parameter. Keys If KEY_Y_LOWER is pressed, the command will be run with True passed in, otherwise False is passed in. Loading Icon/Bar Popup Spawn Command show_loading_icon_popup(title, message) show_loading_bar_popup(title, num_items) Usage The loading popups must be used in conjunction with some sort of async/threading. First, spawn the popup and then start a thread performing the long operation. At the end of the long operation, call: stop_loading_popup() Which will escape the loading popup. When using the loading bar popup, increment yout item counter with: increment_loading_bar() Keys None TextBox Popup Spawn Command show_text_box_popup(title, command) Usage Spawn a text box, and on KEY_ENTER pressed, the command function is triggered with the text from the popup as the parameter. Keys The letter keys will write the text, and KEY_ENTER submits. Menu Popup Spawn Command show_menu_popup(title, menu_items, command, run_command_if_none=False) Usage Use as an overall menu system for your application. Gives user option to select from list. Fires the command with the selected menu item as a parameter on KEY_ENTER Keys Arrow keys scroll up and down, enter key submits.","title":"Popups"},{"location":"popups/#popups","text":"This page contains information regarding all popups supported by py_cui . Please see the popups_example.py in the examples/ directory in the repository.","title":"Popups"},{"location":"popups/#messagewarningerror-popup","text":"Spawn Command show_message_popup(title, text) show_warning_popup(title, text) show_error_popup(title, text) Usage Used to show a simple message, with a different color depending on warning level. Keys Exit from the popup with KEY_ENTER , KEY_ESCAPE , or KEY_SPACE .","title":"Message/Warning/Error Popup"},{"location":"popups/#yesno-popup","text":"Spawn Command show_yes_no_popup(self, title, command) Usage Ask user yes/no question. The command parameter passed to the spawn function must be a function that takes a single boolean parameter. Keys If KEY_Y_LOWER is pressed, the command will be run with True passed in, otherwise False is passed in.","title":"Yes/No Popup"},{"location":"popups/#loading-iconbar-popup","text":"Spawn Command show_loading_icon_popup(title, message) show_loading_bar_popup(title, num_items) Usage The loading popups must be used in conjunction with some sort of async/threading. First, spawn the popup and then start a thread performing the long operation. At the end of the long operation, call: stop_loading_popup() Which will escape the loading popup. When using the loading bar popup, increment yout item counter with: increment_loading_bar() Keys None","title":"Loading Icon/Bar Popup"},{"location":"popups/#textbox-popup","text":"Spawn Command show_text_box_popup(title, command) Usage Spawn a text box, and on KEY_ENTER pressed, the command function is triggered with the text from the popup as the parameter. Keys The letter keys will write the text, and KEY_ENTER submits.","title":"TextBox Popup"},{"location":"popups/#menu-popup","text":"Spawn Command show_menu_popup(title, menu_items, command, run_command_if_none=False) Usage Use as an overall menu system for your application. Gives user option to select from list. Fires the command with the selected menu item as a parameter on KEY_ENTER Keys Arrow keys scroll up and down, enter key submits.","title":"Menu Popup"},{"location":"usage/","text":"Usage In this section we discuss some universal usage rules common to all py_cui based interfaces. py_cui Operation Modes Each py_cui based interface has three operation modes: overview mode, focus mode, and popup mode. Overview Mode In overview mode, you use your arrow keys to navigate between widgets. While in overview mode you may also press buttons by hovering over them and pressing Enter, or you may enter focus mode on a widget by hovering over it and pressing Enter. In addition, any keybindings you add to the root PyCUI object will be accessible while in overview mode. Also while in overview mode, by default the q key is used to quit. Focus mode Once you enter focus mode on a particular widget, different keybindings apply. These vary from widget to widget, but the Esc key always returns to overview mode. Also, any keybindings assigned to the in-focus widget will be honored here. Popup Mode During popup mode, no keybindings are accepted by default. Certain popups allow for certain keys to close or interact with them however. When in popup mode no CUI widgets or overview are accessible. If a widget was in focus when popup mode is initiated, focus is lost.","title":"Basic Usage"},{"location":"usage/#usage","text":"In this section we discuss some universal usage rules common to all py_cui based interfaces.","title":"Usage"},{"location":"usage/#py_cui-operation-modes","text":"Each py_cui based interface has three operation modes: overview mode, focus mode, and popup mode. Overview Mode In overview mode, you use your arrow keys to navigate between widgets. While in overview mode you may also press buttons by hovering over them and pressing Enter, or you may enter focus mode on a widget by hovering over it and pressing Enter. In addition, any keybindings you add to the root PyCUI object will be accessible while in overview mode. Also while in overview mode, by default the q key is used to quit. Focus mode Once you enter focus mode on a particular widget, different keybindings apply. These vary from widget to widget, but the Esc key always returns to overview mode. Also, any keybindings assigned to the in-focus widget will be honored here. Popup Mode During popup mode, no keybindings are accepted by default. Certain popups allow for certain keys to close or interact with them however. When in popup mode no CUI widgets or overview are accessible. If a widget was in focus when popup mode is initiated, focus is lost.","title":"py_cui Operation Modes"},{"location":"widgets/","text":"Widgets Below are details on each widget supported by py_cui including how to add them to a CUI, draw behavior, and default keybindings. Please take a look at Classes and Functions section of these docs to see function/attribute information. Label Usage Labels only display text. You cannot enter focus mode on labels, and thus keybindings will have no effect. Add labels for single lines to text to the center of a grid cell. Adding to CUI add_label(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) Draw Behavior Draws self._title in the center of the grid location it is placed in. Default Keybindings None Block Label Usage Block Labels only display text. You cannot enter focus mode on block labels, and thus keybindings will have no effect. Add block labels for multi line text that will be drawn in the center of the grid cell. One example for this is to display ASCII-Art. Adding to CUI add_block_label(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) Draw Behavior Draws self._title.splitlines() in the center of the grid location it is placed in. Default Keybindings None Button Usage Buttons execute a no-args function when enter pressed. By default, pressing enter when hovering over a button executes the command instead of entering focus mode. To disable this behavior, add the auto_focus_buttons=False to the creation of the PyCUI object. Adding to CUI add_button(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, command=None) Draw Behavior Draws self._title centered in the grid cell, with a border. By default, buttons have a magenta color. Default Keybindings KEY_ENTER - runs the command passed into the button Scroll Menu Usage Scroll Menus are very useful for having multiple option menus or for showing a list of information. The most common usage is to add a keybinding for the ENTER which processes some function depending on the selected item. Adding to CUI menu_item_list = [\"Item1\", \"Item2\", ...] menu = add_scroll_menu(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) menu.add_item_list(menu_item_list) Draw Behavior Draws all menu items starting with upper viewport item down, along with a border. The title is drawn inline with the top of the border Default Keybindings KEY_UP_ARROW - Scrolls up if selected item index is greater than 0 KEY_DOWN_ARROW - Scrolls down if selected item index is not at the end of the list Checkbox Menu The checkbox menu extends from the scrollmenu, and so shares many functions with it. Usage Checkbox Menus are very useful for selecting several options. They should be used for having the user to select multiple items. Adding to CUI menu_item_list = [\"Item1\", \"Item2\", ...] menu = add_checkbox_menu(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) menu.add_item_list(menu_item_list) Draw Behavior Draws all menu items starting with upper viewport item down, along with a border. The title is drawn inline with the top of the border Default Keybindings KEY_UP_ARROW - Scrolls up if selected item index is greater than 0 KEY_DOWN_ARROW - Scrolls down if selected item index is not at the end of the list Text Box Usage Used for user entering text into CUI. For prompts, it is suggested to use the Textbox popup instead. Adding to CUI add_text_box(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, initial_text = '') Draw Behavior Draws title above a bordered entry field centered in the grid cell assigned Default Keybindings KEY_END - Jumps to the end of the text KEY_HOME - Jumps to start of the text KEY_LEFT_ARROW - Shifts cursor to left KEY_RIGHT_ARROW - Shifts cursor to right Letter Keys - writes the appropriate letter to the text KEY_BACKSPACE - Erases character in text Text Block Usage TextBoxes have two key uses: * For editing larger blocks of text, such as if you wish to create a CUI text editor (see snano example) * For displaying large amounts of text, such as statuses, logs etc. (see pyautogit example) Adding to CUI add_text_block(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, initial_text = '') Draw Behavior Draws title above a bordered entry box that fills the grid cells. Default Keybindings KEY_END - Jumps to the end of the text KEY_HOME - Jumps to start of the text KEY_LEFT_ARROW - Shifts cursor to left KEY_RIGHT_ARROW - Shifts cursor to right KEY_DOWN_ARROW - Shifts cursor down KEY_UP_ARROW - Shifts cursor up Letter Keys - writes the appropriate letter to the text KEY_BACKSPACE - Erases character in text KEY_TAB - Enters 4 space characters (Sorry tab people) KEY_DELETE - Deletes next character KEY_ENTER - Inserts newline character","title":"Widgets"},{"location":"widgets/#widgets","text":"Below are details on each widget supported by py_cui including how to add them to a CUI, draw behavior, and default keybindings. Please take a look at Classes and Functions section of these docs to see function/attribute information.","title":"Widgets"},{"location":"widgets/#label","text":"Usage Labels only display text. You cannot enter focus mode on labels, and thus keybindings will have no effect. Add labels for single lines to text to the center of a grid cell. Adding to CUI add_label(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) Draw Behavior Draws self._title in the center of the grid location it is placed in. Default Keybindings None","title":"Label"},{"location":"widgets/#block-label","text":"Usage Block Labels only display text. You cannot enter focus mode on block labels, and thus keybindings will have no effect. Add block labels for multi line text that will be drawn in the center of the grid cell. One example for this is to display ASCII-Art. Adding to CUI add_block_label(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) Draw Behavior Draws self._title.splitlines() in the center of the grid location it is placed in. Default Keybindings None","title":"Block Label"},{"location":"widgets/#button","text":"Usage Buttons execute a no-args function when enter pressed. By default, pressing enter when hovering over a button executes the command instead of entering focus mode. To disable this behavior, add the auto_focus_buttons=False to the creation of the PyCUI object. Adding to CUI add_button(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, command=None) Draw Behavior Draws self._title centered in the grid cell, with a border. By default, buttons have a magenta color. Default Keybindings KEY_ENTER - runs the command passed into the button","title":"Button"},{"location":"widgets/#scroll-menu","text":"Usage Scroll Menus are very useful for having multiple option menus or for showing a list of information. The most common usage is to add a keybinding for the ENTER which processes some function depending on the selected item. Adding to CUI menu_item_list = [\"Item1\", \"Item2\", ...] menu = add_scroll_menu(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) menu.add_item_list(menu_item_list) Draw Behavior Draws all menu items starting with upper viewport item down, along with a border. The title is drawn inline with the top of the border Default Keybindings KEY_UP_ARROW - Scrolls up if selected item index is greater than 0 KEY_DOWN_ARROW - Scrolls down if selected item index is not at the end of the list","title":"Scroll Menu"},{"location":"widgets/#checkbox-menu","text":"The checkbox menu extends from the scrollmenu, and so shares many functions with it. Usage Checkbox Menus are very useful for selecting several options. They should be used for having the user to select multiple items. Adding to CUI menu_item_list = [\"Item1\", \"Item2\", ...] menu = add_checkbox_menu(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) menu.add_item_list(menu_item_list) Draw Behavior Draws all menu items starting with upper viewport item down, along with a border. The title is drawn inline with the top of the border Default Keybindings KEY_UP_ARROW - Scrolls up if selected item index is greater than 0 KEY_DOWN_ARROW - Scrolls down if selected item index is not at the end of the list","title":"Checkbox Menu"},{"location":"widgets/#text-box","text":"Usage Used for user entering text into CUI. For prompts, it is suggested to use the Textbox popup instead. Adding to CUI add_text_box(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, initial_text = '') Draw Behavior Draws title above a bordered entry field centered in the grid cell assigned Default Keybindings KEY_END - Jumps to the end of the text KEY_HOME - Jumps to start of the text KEY_LEFT_ARROW - Shifts cursor to left KEY_RIGHT_ARROW - Shifts cursor to right Letter Keys - writes the appropriate letter to the text KEY_BACKSPACE - Erases character in text","title":"Text Box"},{"location":"widgets/#text-block","text":"Usage TextBoxes have two key uses: * For editing larger blocks of text, such as if you wish to create a CUI text editor (see snano example) * For displaying large amounts of text, such as statuses, logs etc. (see pyautogit example) Adding to CUI add_text_block(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, initial_text = '') Draw Behavior Draws title above a bordered entry box that fills the grid cells. Default Keybindings KEY_END - Jumps to the end of the text KEY_HOME - Jumps to start of the text KEY_LEFT_ARROW - Shifts cursor to left KEY_RIGHT_ARROW - Shifts cursor to right KEY_DOWN_ARROW - Shifts cursor down KEY_UP_ARROW - Shifts cursor up Letter Keys - writes the appropriate letter to the text KEY_BACKSPACE - Erases character in text KEY_TAB - Enters 4 space characters (Sorry tab people) KEY_DELETE - Deletes next character KEY_ENTER - Inserts newline character","title":"Text Block"},{"location":"writing/","text":"Writing a py_cui, step by step On this page, we will create a simple py_cui program, step by step. We will create something similar to the todo list example that can be seen in the examples directory in the repository. Step 1 - Create PyCUI and wrapper class The recommended way to create py_cui programs is to create a wrapper class that takes the PyCUI object as an argument, similar to how Tk objects are often passed as an argument to a wrapper class. import py_cui class SimpleTodoList: def __init__(self, master): self.master = master # Create the CUI with 7 rows 6 columns, pass it to the wrapper object, and start it root = py_cui.PyCUI(7, 6) root.set_title('CUI TODO List') s = SimpleTodoList(root) root.start() Step 2 - Add your widgets Next, we want to add widgets to the CUI. We will add 3 scroll menus to represent our lists of TODO, In Progress, and Done, a text field for adding new items for now. import py_cui class SimpleTodoList: def __init__(self, master): self.master = master # The scrolled list cells that will contain our tasks in each of the three categories self.todo_scroll_cell = self.master.add_scroll_menu('TODO', 0, 0, row_span=6, column_span=2) self.in_progress_scroll_cell = self.master.add_scroll_menu('In Progress', 0, 2, row_span=7, column_span=2) self.done_scroll_cell = self.master.add_scroll_menu('Done', 0, 4, row_span=7, column_span=2) # Textbox for entering new items self.new_todo_textbox = self.master.add_text_box('TODO Item', 6, 0, column_span=2) # Create the CUI with 7 rows 6 columns, pass it to the wrapper object, and start it root = py_cui.PyCUI(7, 6) root.set_title('CUI TODO List') s = SimpleTodoList(root) root.start() Note how we set the row_span and column_span values, so that even though the grid is 7x6, our widgets will actually be larger than that size. The reason we define these sizes is becaue we wish to have the text field fill a narrow row, meaning that we must subdivide the window into many rows. Step 3 - Add key commands Next, add keybindings to your widgets. We want buttons that send items into the next list, and the items get removed if theyre in the \"Done\" list. Also, we need to make the text field send its contents into the \"TODO\" list. import py_cui class SimpleTodoList: def __init__(self, master): self.master = master # The scrolled list cells that will contain our tasks in each of the three categories self.todo_scroll_cell = self.master.add_scroll_menu('TODO', 0, 0, row_span=6, column_span=2) self.in_progress_scroll_cell = self.master.add_scroll_menu('In Progress', 0, 2, row_span=7, column_span=2) self.done_scroll_cell = self.master.add_scroll_menu('Done', 0, 4, row_span=7, column_span=2) # Textbox for entering new items self.new_todo_textbox = self.master.add_text_box('TODO Item', 6, 0, column_span=2) self.new_todo_textbox.add_key_command( py_cui.keys.KEY_ENTER, self.add_item) self.todo_scroll_cell.add_key_command( py_cui.keys.KEY_ENTER, self.mark_as_in_progress) self.in_progress_scroll_cell.add_key_command( py_cui.keys.KEY_ENTER, self.mark_as_done) self.done_scroll_cell.add_key_command( py_cui.keys.KEY_ENTER, self.remove_item) def add_item(self): \"\"\" Add a todo item \"\"\" self.todo_scroll_cell.add_item('{}'.format(self.new_todo_textbox.get())) self.new_todo_textbox.clear() def mark_as_in_progress(self): \"\"\" Mark a todo item as inprogress. Remove it from todo scroll list, add it to in progress list, or show error popup if no tasks \"\"\" in_prog = self.todo_scroll_cell.get() if in_prog is None: self.master.show_error_popup('No Item', 'There is no item in the list to mark as in progress') return self.todo_scroll_cell.remove_selected_item() self.in_progress_scroll_cell.add_item(in_prog) def mark_as_done(self): \"\"\" Mark a inprogress item as done. Remove it from inprogress scroll list, add it to done list, or show error popup if no tasks \"\"\" done = self.in_progress_scroll_cell.get() if done is None: self.master.show_error_popup('No Item', 'There is no item in the list to mark as done') return self.in_progress_scroll_cell.remove_selected_item() self.done_scroll_cell.add_item(done) def remove_item(self): \"\"\" Remove a todo item \"\"\" self.done_scroll_cell.remove_selected_item() # Create the CUI with 7 rows 6 columns, pass it to the wrapper object, and start it root = py_cui.PyCUI(7, 6) root.set_title('CUI TODO List') s = SimpleTodoList(root) root.start() Note that in the mark_as_in_progress and mark_as_done functions spawn an error popup if the lists are empty. Step 4 - You're done! That's it! our simple example is complete, and you can test it with: python3 simple_todo.py You should see something similar to this: Feel free to play around with this CUI, and note how the keybindings we assigned perform the tasks we wanted them to.","title":"Writing a PyCUI step-by-step"},{"location":"writing/#writing-a-py_cui-step-by-step","text":"On this page, we will create a simple py_cui program, step by step. We will create something similar to the todo list example that can be seen in the examples directory in the repository. Step 1 - Create PyCUI and wrapper class The recommended way to create py_cui programs is to create a wrapper class that takes the PyCUI object as an argument, similar to how Tk objects are often passed as an argument to a wrapper class. import py_cui class SimpleTodoList: def __init__(self, master): self.master = master # Create the CUI with 7 rows 6 columns, pass it to the wrapper object, and start it root = py_cui.PyCUI(7, 6) root.set_title('CUI TODO List') s = SimpleTodoList(root) root.start() Step 2 - Add your widgets Next, we want to add widgets to the CUI. We will add 3 scroll menus to represent our lists of TODO, In Progress, and Done, a text field for adding new items for now. import py_cui class SimpleTodoList: def __init__(self, master): self.master = master # The scrolled list cells that will contain our tasks in each of the three categories self.todo_scroll_cell = self.master.add_scroll_menu('TODO', 0, 0, row_span=6, column_span=2) self.in_progress_scroll_cell = self.master.add_scroll_menu('In Progress', 0, 2, row_span=7, column_span=2) self.done_scroll_cell = self.master.add_scroll_menu('Done', 0, 4, row_span=7, column_span=2) # Textbox for entering new items self.new_todo_textbox = self.master.add_text_box('TODO Item', 6, 0, column_span=2) # Create the CUI with 7 rows 6 columns, pass it to the wrapper object, and start it root = py_cui.PyCUI(7, 6) root.set_title('CUI TODO List') s = SimpleTodoList(root) root.start() Note how we set the row_span and column_span values, so that even though the grid is 7x6, our widgets will actually be larger than that size. The reason we define these sizes is becaue we wish to have the text field fill a narrow row, meaning that we must subdivide the window into many rows. Step 3 - Add key commands Next, add keybindings to your widgets. We want buttons that send items into the next list, and the items get removed if theyre in the \"Done\" list. Also, we need to make the text field send its contents into the \"TODO\" list. import py_cui class SimpleTodoList: def __init__(self, master): self.master = master # The scrolled list cells that will contain our tasks in each of the three categories self.todo_scroll_cell = self.master.add_scroll_menu('TODO', 0, 0, row_span=6, column_span=2) self.in_progress_scroll_cell = self.master.add_scroll_menu('In Progress', 0, 2, row_span=7, column_span=2) self.done_scroll_cell = self.master.add_scroll_menu('Done', 0, 4, row_span=7, column_span=2) # Textbox for entering new items self.new_todo_textbox = self.master.add_text_box('TODO Item', 6, 0, column_span=2) self.new_todo_textbox.add_key_command( py_cui.keys.KEY_ENTER, self.add_item) self.todo_scroll_cell.add_key_command( py_cui.keys.KEY_ENTER, self.mark_as_in_progress) self.in_progress_scroll_cell.add_key_command( py_cui.keys.KEY_ENTER, self.mark_as_done) self.done_scroll_cell.add_key_command( py_cui.keys.KEY_ENTER, self.remove_item) def add_item(self): \"\"\" Add a todo item \"\"\" self.todo_scroll_cell.add_item('{}'.format(self.new_todo_textbox.get())) self.new_todo_textbox.clear() def mark_as_in_progress(self): \"\"\" Mark a todo item as inprogress. Remove it from todo scroll list, add it to in progress list, or show error popup if no tasks \"\"\" in_prog = self.todo_scroll_cell.get() if in_prog is None: self.master.show_error_popup('No Item', 'There is no item in the list to mark as in progress') return self.todo_scroll_cell.remove_selected_item() self.in_progress_scroll_cell.add_item(in_prog) def mark_as_done(self): \"\"\" Mark a inprogress item as done. Remove it from inprogress scroll list, add it to done list, or show error popup if no tasks \"\"\" done = self.in_progress_scroll_cell.get() if done is None: self.master.show_error_popup('No Item', 'There is no item in the list to mark as done') return self.in_progress_scroll_cell.remove_selected_item() self.done_scroll_cell.add_item(done) def remove_item(self): \"\"\" Remove a todo item \"\"\" self.done_scroll_cell.remove_selected_item() # Create the CUI with 7 rows 6 columns, pass it to the wrapper object, and start it root = py_cui.PyCUI(7, 6) root.set_title('CUI TODO List') s = SimpleTodoList(root) root.start() Note that in the mark_as_in_progress and mark_as_done functions spawn an error popup if the lists are empty. Step 4 - You're done! That's it! our simple example is complete, and you can test it with: python3 simple_todo.py You should see something similar to this: Feel free to play around with this CUI, and note how the keybindings we assigned perform the tasks we wanted them to.","title":"Writing a py_cui, step by step"},{"location":"DocstringGenerated/Colors/","text":"colors File containing color rule class and any color-rendering related functions @author: Jakub Wlodek @created: 12-Aug-2019 Classes Class Doc ColorRule Class representing a text color rendering rule ColorRule class ColorRule Class representing a text color rendering rule Attributes Attribute Type Doc regex str A python 're' module string color int A valid color value. Ex. py_cui.WHITE_ON_BLACK rule_type str String representing rule type. ['startswith', 'endswith', 'notstartswith', 'notendswith', 'contains'] match_type str String representing the match type. ['line', 'regex', 'region'] region [int, int] Start and end positions for the coloring, None if match_type != 'region' include_whitespace bool Flag to determine whether to strip whitespace before matching. Methods Method Doc _check_match Checks if the color rule matches a line _generate_fragments_regex Splits text into fragments based on regular expression _split_text_on_region Splits text into fragments based on region generate_fragments Splits text into fragments if matched line to regex init def __init__(self, regex, color, rule_type, match_type, region, include_whitespace, logger) Constructor for ColorRule object Parameters Parameter Type Doc regex str A python 're' module string color int A valid color value. Ex. py_cui.WHITE_ON_BLACK rule_type str String representing rule type. ['startswith', 'endswith', 'notstartswith', 'notendswith', 'contains'] match_type str String representing the match type. ['line', 'regex', 'region'] region [int, int] Start and end positions for the coloring, None if match_type != 'region' include_whitespace bool Flag to determine whether to strip whitespace before matching. _check_match def _check_match(self, line) Checks if the color rule matches a line Parameters Parameter Type Doc line str The input line of text to try to match the rule against Returns Return Variable Type Doc matched bool True if a match was found, false otherwise _generate_fragments_regex def _generate_fragments_regex(self, widget, render_text) Splits text into fragments based on regular expression Parameters Parameter Type Doc widget py_cui.Widget Widget containing the render text render_text str text being rendered Returns Return Variable Type Doc fragments list of lists of [str, color] the render text split into fragments of strings paired with colors _split_text_on_region def _split_text_on_region(self, widget, render_text) Splits text into fragments based on region Parameters Parameter Type Doc widget py_cui.Widget Widget containing the render text render_text str text being rendered Returns Return Variable Type Doc fragments list of lists of [str, color] the render text split into fragments of strings paired with colors generate_fragments def generate_fragments(self, widget, line, render_text) Splits text into fragments if matched line to regex Parameters Parameter Type Doc widget py_cui.Widget Widget containing the render text line str the line to match render_text str text being rendered Returns Return Variable Type Doc fragments List[List[str, color]] the render text split into fragments of strings paired with colors matched bool Boolean output saying if a match was found in the line.","title":"Colors"},{"location":"DocstringGenerated/Colors/#colors","text":"File containing color rule class and any color-rendering related functions @author: Jakub Wlodek @created: 12-Aug-2019","title":"colors"},{"location":"DocstringGenerated/Colors/#classes","text":"Class Doc ColorRule Class representing a text color rendering rule","title":"Classes"},{"location":"DocstringGenerated/Colors/#colorrule","text":"class ColorRule Class representing a text color rendering rule","title":"ColorRule"},{"location":"DocstringGenerated/Colors/#attributes","text":"Attribute Type Doc regex str A python 're' module string color int A valid color value. Ex. py_cui.WHITE_ON_BLACK rule_type str String representing rule type. ['startswith', 'endswith', 'notstartswith', 'notendswith', 'contains'] match_type str String representing the match type. ['line', 'regex', 'region'] region [int, int] Start and end positions for the coloring, None if match_type != 'region' include_whitespace bool Flag to determine whether to strip whitespace before matching.","title":"Attributes"},{"location":"DocstringGenerated/Colors/#methods","text":"Method Doc _check_match Checks if the color rule matches a line _generate_fragments_regex Splits text into fragments based on regular expression _split_text_on_region Splits text into fragments based on region generate_fragments Splits text into fragments if matched line to regex","title":"Methods"},{"location":"DocstringGenerated/Colors/#init","text":"def __init__(self, regex, color, rule_type, match_type, region, include_whitespace, logger) Constructor for ColorRule object","title":"init"},{"location":"DocstringGenerated/Colors/#parameters","text":"Parameter Type Doc regex str A python 're' module string color int A valid color value. Ex. py_cui.WHITE_ON_BLACK rule_type str String representing rule type. ['startswith', 'endswith', 'notstartswith', 'notendswith', 'contains'] match_type str String representing the match type. ['line', 'regex', 'region'] region [int, int] Start and end positions for the coloring, None if match_type != 'region' include_whitespace bool Flag to determine whether to strip whitespace before matching.","title":"Parameters"},{"location":"DocstringGenerated/Colors/#_check_match","text":"def _check_match(self, line) Checks if the color rule matches a line","title":"_check_match"},{"location":"DocstringGenerated/Colors/#parameters_1","text":"Parameter Type Doc line str The input line of text to try to match the rule against","title":"Parameters"},{"location":"DocstringGenerated/Colors/#returns","text":"Return Variable Type Doc matched bool True if a match was found, false otherwise","title":"Returns"},{"location":"DocstringGenerated/Colors/#_generate_fragments_regex","text":"def _generate_fragments_regex(self, widget, render_text) Splits text into fragments based on regular expression","title":"_generate_fragments_regex"},{"location":"DocstringGenerated/Colors/#parameters_2","text":"Parameter Type Doc widget py_cui.Widget Widget containing the render text render_text str text being rendered","title":"Parameters"},{"location":"DocstringGenerated/Colors/#returns_1","text":"Return Variable Type Doc fragments list of lists of [str, color] the render text split into fragments of strings paired with colors","title":"Returns"},{"location":"DocstringGenerated/Colors/#_split_text_on_region","text":"def _split_text_on_region(self, widget, render_text) Splits text into fragments based on region","title":"_split_text_on_region"},{"location":"DocstringGenerated/Colors/#parameters_3","text":"Parameter Type Doc widget py_cui.Widget Widget containing the render text render_text str text being rendered","title":"Parameters"},{"location":"DocstringGenerated/Colors/#returns_2","text":"Return Variable Type Doc fragments list of lists of [str, color] the render text split into fragments of strings paired with colors","title":"Returns"},{"location":"DocstringGenerated/Colors/#generate_fragments","text":"def generate_fragments(self, widget, line, render_text) Splits text into fragments if matched line to regex","title":"generate_fragments"},{"location":"DocstringGenerated/Colors/#parameters_4","text":"Parameter Type Doc widget py_cui.Widget Widget containing the render text line str the line to match render_text str text being rendered","title":"Parameters"},{"location":"DocstringGenerated/Colors/#returns_3","text":"Return Variable Type Doc fragments List[List[str, color]] the render text split into fragments of strings paired with colors matched bool Boolean output saying if a match was found in the line.","title":"Returns"},{"location":"DocstringGenerated/Debug/","text":"debug Module containing py_cui logging utilities Classes Class Doc PyCUILogger(logging.Logger) Custom logger class for py_cui, extends the base logging.Logger Class Functions Function Doc _enable_logging Function that creates basic logging configuration for selected logger _initialize_logger Function that retrieves an instance of either the default or custom py_cui logger. _enable_logging def _enable_logging(logger, filename='py_cui_log.txt', logging_level=logging.DEBUG) Function that creates basic logging configuration for selected logger Parameters Parameter Type Doc logger PyCUILogger Main logger object filename os.Pathlike File path for output logfile logging_level logging.LEVEL, optional Level of messages to display, by default logging.DEBUG Raises Error Type Doc Unknown PermissionError py_cui logs require permission to cwd to operate. Unknown TypeError Only the custom PyCUILogger can be used here. _initialize_logger def _initialize_logger(py_cui_root, name=None, custom_logger=True) Function that retrieves an instance of either the default or custom py_cui logger. Parameters Parameter Type Doc py_cui_root py_cui.PyCUI reference to the root py_cui window name str, optional The name of the logger, by default None custom_logger bool, optional Use a custom py_cui logger, by default True Returns Return Variable Type Doc logger py_cui.debug.PyCUILogger A custom logger that allows for live debugging PyCUILogger(logging.Logger) class PyCUILogger(logging.Logger) Custom logger class for py_cui, extends the base logging.Logger Class Attributes Attribute Type Doc py_cui_root py_cui.PyCUI The root py_cui program for which the logger runs live_debug bool Flag to toggle live debugging messages Methods Method Doc _assign_root_window Attaches logger to the root window for live debugging _get_debug_text Function that generates full debug text for the log info Adds stacktrace info to log debug Function that allows for live debugging of py_cui programs by displaying log messages in the satus bar warn Function that allows for live debugging of py_cui programs by displaying log messages in the satus bar error Function that displays error messages live in status bar for py_cui logging toggle_live_debug Toggles live debugging mode init def __init__(self, name) Initializer for the PyCUILogger helper class Raises Error Type Doc Unknown TypeError If root variable instance is not a PyCUI object raise a typeerror _assign_root_window def _assign_root_window(self, py_cui_root) Attaches logger to the root window for live debugging _get_debug_text def _get_debug_text(self, text) Function that generates full debug text for the log info def info(self, text) Adds stacktrace info to log Parameters Parameter Type Doc text str The log text ot display debug def debug(self, text) Function that allows for live debugging of py_cui programs by displaying log messages in the satus bar Parameters Parameter Type Doc text str The log text ot display warn def warn(self, text) Function that allows for live debugging of py_cui programs by displaying log messages in the satus bar Parameters Parameter Type Doc text str The log text ot display error def error(self, text) Function that displays error messages live in status bar for py_cui logging Parameters Parameter Type Doc text str The log text ot display toggle_live_debug def toggle_live_debug(self, level=logging.ERROR) Toggles live debugging mode","title":"debug"},{"location":"DocstringGenerated/Debug/#debug","text":"Module containing py_cui logging utilities","title":"debug"},{"location":"DocstringGenerated/Debug/#classes","text":"Class Doc PyCUILogger(logging.Logger) Custom logger class for py_cui, extends the base logging.Logger Class","title":"Classes"},{"location":"DocstringGenerated/Debug/#functions","text":"Function Doc _enable_logging Function that creates basic logging configuration for selected logger _initialize_logger Function that retrieves an instance of either the default or custom py_cui logger.","title":"Functions"},{"location":"DocstringGenerated/Debug/#_enable_logging","text":"def _enable_logging(logger, filename='py_cui_log.txt', logging_level=logging.DEBUG) Function that creates basic logging configuration for selected logger","title":"_enable_logging"},{"location":"DocstringGenerated/Debug/#parameters","text":"Parameter Type Doc logger PyCUILogger Main logger object filename os.Pathlike File path for output logfile logging_level logging.LEVEL, optional Level of messages to display, by default logging.DEBUG","title":"Parameters"},{"location":"DocstringGenerated/Debug/#raises","text":"Error Type Doc Unknown PermissionError py_cui logs require permission to cwd to operate. Unknown TypeError Only the custom PyCUILogger can be used here.","title":"Raises"},{"location":"DocstringGenerated/Debug/#_initialize_logger","text":"def _initialize_logger(py_cui_root, name=None, custom_logger=True) Function that retrieves an instance of either the default or custom py_cui logger.","title":"_initialize_logger"},{"location":"DocstringGenerated/Debug/#parameters_1","text":"Parameter Type Doc py_cui_root py_cui.PyCUI reference to the root py_cui window name str, optional The name of the logger, by default None custom_logger bool, optional Use a custom py_cui logger, by default True","title":"Parameters"},{"location":"DocstringGenerated/Debug/#returns","text":"Return Variable Type Doc logger py_cui.debug.PyCUILogger A custom logger that allows for live debugging","title":"Returns"},{"location":"DocstringGenerated/Debug/#pycuiloggerlogginglogger","text":"class PyCUILogger(logging.Logger) Custom logger class for py_cui, extends the base logging.Logger Class","title":"PyCUILogger(logging.Logger)"},{"location":"DocstringGenerated/Debug/#attributes","text":"Attribute Type Doc py_cui_root py_cui.PyCUI The root py_cui program for which the logger runs live_debug bool Flag to toggle live debugging messages","title":"Attributes"},{"location":"DocstringGenerated/Debug/#methods","text":"Method Doc _assign_root_window Attaches logger to the root window for live debugging _get_debug_text Function that generates full debug text for the log info Adds stacktrace info to log debug Function that allows for live debugging of py_cui programs by displaying log messages in the satus bar warn Function that allows for live debugging of py_cui programs by displaying log messages in the satus bar error Function that displays error messages live in status bar for py_cui logging toggle_live_debug Toggles live debugging mode","title":"Methods"},{"location":"DocstringGenerated/Debug/#init","text":"def __init__(self, name) Initializer for the PyCUILogger helper class","title":"init"},{"location":"DocstringGenerated/Debug/#raises_1","text":"Error Type Doc Unknown TypeError If root variable instance is not a PyCUI object raise a typeerror","title":"Raises"},{"location":"DocstringGenerated/Debug/#_assign_root_window","text":"def _assign_root_window(self, py_cui_root) Attaches logger to the root window for live debugging","title":"_assign_root_window"},{"location":"DocstringGenerated/Debug/#_get_debug_text","text":"def _get_debug_text(self, text) Function that generates full debug text for the log","title":"_get_debug_text"},{"location":"DocstringGenerated/Debug/#info","text":"def info(self, text) Adds stacktrace info to log","title":"info"},{"location":"DocstringGenerated/Debug/#parameters_2","text":"Parameter Type Doc text str The log text ot display","title":"Parameters"},{"location":"DocstringGenerated/Debug/#debug_1","text":"def debug(self, text) Function that allows for live debugging of py_cui programs by displaying log messages in the satus bar","title":"debug"},{"location":"DocstringGenerated/Debug/#parameters_3","text":"Parameter Type Doc text str The log text ot display","title":"Parameters"},{"location":"DocstringGenerated/Debug/#warn","text":"def warn(self, text) Function that allows for live debugging of py_cui programs by displaying log messages in the satus bar","title":"warn"},{"location":"DocstringGenerated/Debug/#parameters_4","text":"Parameter Type Doc text str The log text ot display","title":"Parameters"},{"location":"DocstringGenerated/Debug/#error","text":"def error(self, text) Function that displays error messages live in status bar for py_cui logging","title":"error"},{"location":"DocstringGenerated/Debug/#parameters_5","text":"Parameter Type Doc text str The log text ot display","title":"Parameters"},{"location":"DocstringGenerated/Debug/#toggle_live_debug","text":"def toggle_live_debug(self, level=logging.ERROR) Toggles live debugging mode","title":"toggle_live_debug"},{"location":"DocstringGenerated/Grid/","text":"grid File containing the Grid Class. The grid is currently the only supported layout manager for py_cui @author: Jakub Wlodek @created: 12-Aug-2019 Classes Class Doc Grid Class representing the CUI grid Grid class Grid Class representing the CUI grid Attributes Attribute Type Doc _num_rows, _num_columns int Number of grid rows and columns _height, _width int The height, width in characters of the terminal window _offset_y, _offset_x int The number of additional characters found by height mod rows and width mod columns _row_height, _column_width int The number of characters in a single grid row, column _logger py_cui.debug.PyCUILogger logger object for maintaining debug messages Methods Method Doc get_dimensions Gets dimensions in rows/columns get_dimensions_absolute Gets dimensions of grid in terminal characters get_offsets Gets leftover characters for x and y get_cell_dimensions Gets size in characters of single (row, column) cell location set_num_rows Sets the grid row size set_num_cols Sets the grid column size update_grid_height_width Update grid height and width. Allows for on-the-fly size editing init def __init__(self, num_rows, num_columns, height, width, logger) Constructor for the Grid class Parameters Parameter Type Doc num_rows int Number of grid rows num_columns int Number of grid columns height int The height in characters of the terminal window width int The width in characters of the terminal window get_dimensions def get_dimensions(self) Gets dimensions in rows/columns Returns Return Variable Type Doc num_rows int size of grid in rows num_cols int size of grid in columns get_dimensions_absolute def get_dimensions_absolute(self) Gets dimensions of grid in terminal characters Returns Return Variable Type Doc height int height in characters width int width in characters get_offsets def get_offsets(self) Gets leftover characters for x and y Returns Return Variable Type Doc offset_x int leftover chars in x direction offset_y int leftover chars in y direction get_cell_dimensions def get_cell_dimensions(self) Gets size in characters of single (row, column) cell location Returns Return Variable Type Doc row_height int height of row in characters column_width int width of column in characters set_num_rows def set_num_rows(self, num_rows) Sets the grid row size Parameters Parameter Type Doc num_rows int New number of grid rows Raises Error Type Doc error PyCUIOutOfBoundsError If the size of the terminal window is too small set_num_cols def set_num_cols(self, num_columns) Sets the grid column size Parameters Parameter Type Doc num_columns int New number of grid columns Raises Error Type Doc error PyCUIOutOfBoundsError If the size of the terminal window is too small update_grid_height_width def update_grid_height_width(self, height, width) Update grid height and width. Allows for on-the-fly size editing Parameters Parameter Type Doc height int The height in characters of the terminal window width int The width in characters of the terminal window Raises Error Type Doc error PyCUIOutOfBoundsError If the size of the terminal window is too small","title":"Grid"},{"location":"DocstringGenerated/Grid/#grid","text":"File containing the Grid Class. The grid is currently the only supported layout manager for py_cui @author: Jakub Wlodek @created: 12-Aug-2019","title":"grid"},{"location":"DocstringGenerated/Grid/#classes","text":"Class Doc Grid Class representing the CUI grid","title":"Classes"},{"location":"DocstringGenerated/Grid/#grid_1","text":"class Grid Class representing the CUI grid","title":"Grid"},{"location":"DocstringGenerated/Grid/#attributes","text":"Attribute Type Doc _num_rows, _num_columns int Number of grid rows and columns _height, _width int The height, width in characters of the terminal window _offset_y, _offset_x int The number of additional characters found by height mod rows and width mod columns _row_height, _column_width int The number of characters in a single grid row, column _logger py_cui.debug.PyCUILogger logger object for maintaining debug messages","title":"Attributes"},{"location":"DocstringGenerated/Grid/#methods","text":"Method Doc get_dimensions Gets dimensions in rows/columns get_dimensions_absolute Gets dimensions of grid in terminal characters get_offsets Gets leftover characters for x and y get_cell_dimensions Gets size in characters of single (row, column) cell location set_num_rows Sets the grid row size set_num_cols Sets the grid column size update_grid_height_width Update grid height and width. Allows for on-the-fly size editing","title":"Methods"},{"location":"DocstringGenerated/Grid/#init","text":"def __init__(self, num_rows, num_columns, height, width, logger) Constructor for the Grid class","title":"init"},{"location":"DocstringGenerated/Grid/#parameters","text":"Parameter Type Doc num_rows int Number of grid rows num_columns int Number of grid columns height int The height in characters of the terminal window width int The width in characters of the terminal window","title":"Parameters"},{"location":"DocstringGenerated/Grid/#get_dimensions","text":"def get_dimensions(self) Gets dimensions in rows/columns","title":"get_dimensions"},{"location":"DocstringGenerated/Grid/#returns","text":"Return Variable Type Doc num_rows int size of grid in rows num_cols int size of grid in columns","title":"Returns"},{"location":"DocstringGenerated/Grid/#get_dimensions_absolute","text":"def get_dimensions_absolute(self) Gets dimensions of grid in terminal characters","title":"get_dimensions_absolute"},{"location":"DocstringGenerated/Grid/#returns_1","text":"Return Variable Type Doc height int height in characters width int width in characters","title":"Returns"},{"location":"DocstringGenerated/Grid/#get_offsets","text":"def get_offsets(self) Gets leftover characters for x and y","title":"get_offsets"},{"location":"DocstringGenerated/Grid/#returns_2","text":"Return Variable Type Doc offset_x int leftover chars in x direction offset_y int leftover chars in y direction","title":"Returns"},{"location":"DocstringGenerated/Grid/#get_cell_dimensions","text":"def get_cell_dimensions(self) Gets size in characters of single (row, column) cell location","title":"get_cell_dimensions"},{"location":"DocstringGenerated/Grid/#returns_3","text":"Return Variable Type Doc row_height int height of row in characters column_width int width of column in characters","title":"Returns"},{"location":"DocstringGenerated/Grid/#set_num_rows","text":"def set_num_rows(self, num_rows) Sets the grid row size","title":"set_num_rows"},{"location":"DocstringGenerated/Grid/#parameters_1","text":"Parameter Type Doc num_rows int New number of grid rows","title":"Parameters"},{"location":"DocstringGenerated/Grid/#raises","text":"Error Type Doc error PyCUIOutOfBoundsError If the size of the terminal window is too small","title":"Raises"},{"location":"DocstringGenerated/Grid/#set_num_cols","text":"def set_num_cols(self, num_columns) Sets the grid column size","title":"set_num_cols"},{"location":"DocstringGenerated/Grid/#parameters_2","text":"Parameter Type Doc num_columns int New number of grid columns","title":"Parameters"},{"location":"DocstringGenerated/Grid/#raises_1","text":"Error Type Doc error PyCUIOutOfBoundsError If the size of the terminal window is too small","title":"Raises"},{"location":"DocstringGenerated/Grid/#update_grid_height_width","text":"def update_grid_height_width(self, height, width) Update grid height and width. Allows for on-the-fly size editing","title":"update_grid_height_width"},{"location":"DocstringGenerated/Grid/#parameters_3","text":"Parameter Type Doc height int The height in characters of the terminal window width int The width in characters of the terminal window","title":"Parameters"},{"location":"DocstringGenerated/Grid/#raises_2","text":"Error Type Doc error PyCUIOutOfBoundsError If the size of the terminal window is too small","title":"Raises"},{"location":"DocstringGenerated/Keys/","text":"keys Module containing constants and helper functions for dealing with keys. @author: Jakub Wlodek @created: 12-Aug-2019 Functions Function Doc get_ascii_from_char Function that converts ascii code to character get_char_from_ascii Function that converts a character to an ascii code get_ascii_from_char def get_ascii_from_char(char) Function that converts ascii code to character Parameters Parameter Type Doc char character character to convert to ascii Returns Return Variable Type Doc ascii_code int Ascii code of character get_char_from_ascii def get_char_from_ascii(key_num) Function that converts a character to an ascii code Parameters Parameter Type Doc ascii_code int Ascii code of character Returns Return Variable Type Doc char character character converted from ascii","title":"Keys"},{"location":"DocstringGenerated/Keys/#keys","text":"Module containing constants and helper functions for dealing with keys. @author: Jakub Wlodek @created: 12-Aug-2019","title":"keys"},{"location":"DocstringGenerated/Keys/#functions","text":"Function Doc get_ascii_from_char Function that converts ascii code to character get_char_from_ascii Function that converts a character to an ascii code","title":"Functions"},{"location":"DocstringGenerated/Keys/#get_ascii_from_char","text":"def get_ascii_from_char(char) Function that converts ascii code to character","title":"get_ascii_from_char"},{"location":"DocstringGenerated/Keys/#parameters","text":"Parameter Type Doc char character character to convert to ascii","title":"Parameters"},{"location":"DocstringGenerated/Keys/#returns","text":"Return Variable Type Doc ascii_code int Ascii code of character","title":"Returns"},{"location":"DocstringGenerated/Keys/#get_char_from_ascii","text":"def get_char_from_ascii(key_num) Function that converts a character to an ascii code","title":"get_char_from_ascii"},{"location":"DocstringGenerated/Keys/#parameters_1","text":"Parameter Type Doc ascii_code int Ascii code of character","title":"Parameters"},{"location":"DocstringGenerated/Keys/#returns_1","text":"Return Variable Type Doc char character character converted from ascii","title":"Returns"},{"location":"DocstringGenerated/Popups/","text":"popups File containing classes for all popups used by py_cui @author: Jakub Wlodek @created: 12-Aug-2019 Classes Class Doc Popup(py_cui.ui.UIElement) Base CUI popup class. MessagePopup(Popup) Class representing a simple message popup YesNoPopup(Popup) Class for Yes/No popup. Extends Popup TextBoxPopup(Popu Class representing a textbox popup MenuPopup(Popu A scroll menu popup. LoadingIconPopup(Popup) Loading icon popup class LoadingBarPopup(Popup) Class for Loading Bar Popup Popup(py_cui.ui.UIElement) class Popup(py_cui.ui.UIElement) Base CUI popup class. Contains constructor and initial definitions for key_press and draw Unlike widgets, they do not have a set grid cell, they are simply centered in the view frame Attributes Attribute Type Doc _root py_cui.PyCUI Root CUI window _text str Popup message text _selected bool Always true. Used by the renderer to highlight popup _close_keys List[int] List of keycodes used to close popup Methods Method Doc _increment_counter Function that increments an internal counter set_text Sets popup text (message) get_absolute_start_pos Override of base class, computes position based on root dimensions get_absolute_stop_pos Override of base class, computes position based on root dimensions _handle_key_press Handles key presses when popup is open _draw Function that uses renderer to draw the popup init def __init__(self, root, title, text, color, renderer, logger) Initializer for main popup class. Calls UIElement intialier, and sets some initial values _increment_counter def _increment_counter(self) Function that increments an internal counter set_text def set_text(self, text) Sets popup text (message) Parameters Parameter Type Doc text str The new popup text get_absolute_start_pos def get_absolute_start_pos(self) Override of base class, computes position based on root dimensions Returns Return Variable Type Doc start_x, start_y int The coords of the upper-left corner of the popup get_absolute_stop_pos def get_absolute_stop_pos(self) Override of base class, computes position based on root dimensions Returns Return Variable Type Doc stop_x, stop_y int The coords of the lower-right corner of the popup _handle_key_press def _handle_key_press(self, key_pressed) Handles key presses when popup is open By default, only closes popup when Escape is pressed Parameters Parameter Type Doc key_pressed int The ascii code for the key that was pressed _draw def _draw(self) Function that uses renderer to draw the popup Can be implemented by subclass. Base draw function will draw the title and text in a bordered box MessagePopup(Popup) class MessagePopup(Popup) Class representing a simple message popup Methods Method Doc _draw Draw function for MessagePopup. Calls superclass draw() init def __init__(self, root, title, text, color, renderer, logger) Initializer for MessagePopup _draw def _draw(self) Draw function for MessagePopup. Calls superclass draw() YesNoPopup(Popup) class YesNoPopup(Popup) Class for Yes/No popup. Extends Popup Attributes Attribute Type Doc _command function, 1 boolean parameter Function that takes one boolean parameter. Called with True if yes, called with False if no. Methods Method Doc _handle_key_press Handle key press overwrite from superclass _draw Uses base class draw function init def __init__(self, root, title, text, color, command, renderer, logger) Initializer for YesNoPopup _handle_key_press def _handle_key_press(self, key_pressed) Handle key press overwrite from superclass Parameters Parameter Type Doc key_pressed int key code of key pressed _draw def _draw(self) Uses base class draw function TextBoxPopup(Popu class TextBoxPopup(Popup, py_cui.ui.TextBoxImplementation) Class representing a textbox popup Attributes Attribute Type Doc _command function The command to run when enter is pressed Methods Method Doc update_height_width Need to update all cursor positions on resize _handle_key_press Override of base handle key press function _draw Override of base draw function init def __init__(self, root, title, color, command, renderer, password, logger) Initializer for textbox popup. Uses TextBoxImplementation as base update_height_width def update_height_width(self) Need to update all cursor positions on resize _handle_key_press def _handle_key_press(self, key_pressed) Override of base handle key press function Parameters Parameter Type Doc key_pressed int key code of key pressed _draw def _draw(self) Override of base draw function MenuPopup(Popu class MenuPopup(Popup, py_cui.ui.MenuImplementation) A scroll menu popup. Allows for popup with several menu items to select from Attributes Attribute Type Doc _command function a function that takes a single string parameter, run when ENTER pressed _run_command_if_none bool Runs command even if there are no menu items (passes None) Methods Method Doc _handle_key_press Override of base handle key press function _draw Overrides base class draw function init def __init__(self, root, items, title, color, command, renderer, logger, run_command_if_none) Initializer for MenuPopup. Uses MenuImplementation as base _handle_key_press def _handle_key_press(self, key_pressed) Override of base handle key press function Enter key runs command, Escape key closes menu Parameters Parameter Type Doc key_pressed int key code of key pressed _draw def _draw(self) Overrides base class draw function LoadingIconPopup(Popup) class LoadingIconPopup(Popup) Loading icon popup class MUST BE USED WITH A FORM OF ASYNC/THREADING Attributes Attribute Type Doc _loading_icons list of str Animation frames for loading icon _icon_counter int Current frame of animation _message str Loading message Methods Method Doc _handle_key_press Override of base class function. _draw Overrides base draw function init def __init__(self, root, title, message, color, renderer, logger) Initializer for LoadingIconPopup _handle_key_press def _handle_key_press(self, key_pressed) Override of base class function. Loading icon popups cannot be cancelled, so we wish to avoid default behavior Parameters Parameter Type Doc key_pressed int key code of pressed key _draw def _draw(self) Overrides base draw function LoadingBarPopup(Popup) class LoadingBarPopup(Popup) Class for Loading Bar Popup MUST BE USED WITH A FORM OF ASYNC/THREADING Attributes Attribute Type Doc num_items int NUmber of items to count through completed_items int counter for completed items Methods Method Doc _handle_key_press Override of base class function. _increment_counter Function that increments an internal counter _draw Override of base draw function init def __init__(self, root, title, num_items, color, renderer, logger) Initializer for LoadingBarPopup _handle_key_press def _handle_key_press(self, key_pressed) Override of base class function. Loading icon popups cannot be cancelled, so we wish to avoid default behavior Parameters Parameter Type Doc key_pressed int key code of pressed key _increment_counter def _increment_counter(self) Function that increments an internal counter _draw def _draw(self) Override of base draw function","title":"Popups"},{"location":"DocstringGenerated/Popups/#popups","text":"File containing classes for all popups used by py_cui @author: Jakub Wlodek @created: 12-Aug-2019","title":"popups"},{"location":"DocstringGenerated/Popups/#classes","text":"Class Doc Popup(py_cui.ui.UIElement) Base CUI popup class. MessagePopup(Popup) Class representing a simple message popup YesNoPopup(Popup) Class for Yes/No popup. Extends Popup TextBoxPopup(Popu Class representing a textbox popup MenuPopup(Popu A scroll menu popup. LoadingIconPopup(Popup) Loading icon popup class LoadingBarPopup(Popup) Class for Loading Bar Popup","title":"Classes"},{"location":"DocstringGenerated/Popups/#popuppy_cuiuiuielement","text":"class Popup(py_cui.ui.UIElement) Base CUI popup class. Contains constructor and initial definitions for key_press and draw Unlike widgets, they do not have a set grid cell, they are simply centered in the view frame","title":"Popup(py_cui.ui.UIElement)"},{"location":"DocstringGenerated/Popups/#attributes","text":"Attribute Type Doc _root py_cui.PyCUI Root CUI window _text str Popup message text _selected bool Always true. Used by the renderer to highlight popup _close_keys List[int] List of keycodes used to close popup","title":"Attributes"},{"location":"DocstringGenerated/Popups/#methods","text":"Method Doc _increment_counter Function that increments an internal counter set_text Sets popup text (message) get_absolute_start_pos Override of base class, computes position based on root dimensions get_absolute_stop_pos Override of base class, computes position based on root dimensions _handle_key_press Handles key presses when popup is open _draw Function that uses renderer to draw the popup","title":"Methods"},{"location":"DocstringGenerated/Popups/#init","text":"def __init__(self, root, title, text, color, renderer, logger) Initializer for main popup class. Calls UIElement intialier, and sets some initial values","title":"init"},{"location":"DocstringGenerated/Popups/#_increment_counter","text":"def _increment_counter(self) Function that increments an internal counter","title":"_increment_counter"},{"location":"DocstringGenerated/Popups/#set_text","text":"def set_text(self, text) Sets popup text (message)","title":"set_text"},{"location":"DocstringGenerated/Popups/#parameters","text":"Parameter Type Doc text str The new popup text","title":"Parameters"},{"location":"DocstringGenerated/Popups/#get_absolute_start_pos","text":"def get_absolute_start_pos(self) Override of base class, computes position based on root dimensions","title":"get_absolute_start_pos"},{"location":"DocstringGenerated/Popups/#returns","text":"Return Variable Type Doc start_x, start_y int The coords of the upper-left corner of the popup","title":"Returns"},{"location":"DocstringGenerated/Popups/#get_absolute_stop_pos","text":"def get_absolute_stop_pos(self) Override of base class, computes position based on root dimensions","title":"get_absolute_stop_pos"},{"location":"DocstringGenerated/Popups/#returns_1","text":"Return Variable Type Doc stop_x, stop_y int The coords of the lower-right corner of the popup","title":"Returns"},{"location":"DocstringGenerated/Popups/#_handle_key_press","text":"def _handle_key_press(self, key_pressed) Handles key presses when popup is open By default, only closes popup when Escape is pressed","title":"_handle_key_press"},{"location":"DocstringGenerated/Popups/#parameters_1","text":"Parameter Type Doc key_pressed int The ascii code for the key that was pressed","title":"Parameters"},{"location":"DocstringGenerated/Popups/#_draw","text":"def _draw(self) Function that uses renderer to draw the popup Can be implemented by subclass. Base draw function will draw the title and text in a bordered box","title":"_draw"},{"location":"DocstringGenerated/Popups/#messagepopuppopup","text":"class MessagePopup(Popup) Class representing a simple message popup","title":"MessagePopup(Popup)"},{"location":"DocstringGenerated/Popups/#methods_1","text":"Method Doc _draw Draw function for MessagePopup. Calls superclass draw()","title":"Methods"},{"location":"DocstringGenerated/Popups/#init_1","text":"def __init__(self, root, title, text, color, renderer, logger) Initializer for MessagePopup","title":"init"},{"location":"DocstringGenerated/Popups/#_draw_1","text":"def _draw(self) Draw function for MessagePopup. Calls superclass draw()","title":"_draw"},{"location":"DocstringGenerated/Popups/#yesnopopuppopup","text":"class YesNoPopup(Popup) Class for Yes/No popup. Extends Popup","title":"YesNoPopup(Popup)"},{"location":"DocstringGenerated/Popups/#attributes_1","text":"Attribute Type Doc _command function, 1 boolean parameter Function that takes one boolean parameter. Called with True if yes, called with False if no.","title":"Attributes"},{"location":"DocstringGenerated/Popups/#methods_2","text":"Method Doc _handle_key_press Handle key press overwrite from superclass _draw Uses base class draw function","title":"Methods"},{"location":"DocstringGenerated/Popups/#init_2","text":"def __init__(self, root, title, text, color, command, renderer, logger) Initializer for YesNoPopup","title":"init"},{"location":"DocstringGenerated/Popups/#_handle_key_press_1","text":"def _handle_key_press(self, key_pressed) Handle key press overwrite from superclass","title":"_handle_key_press"},{"location":"DocstringGenerated/Popups/#parameters_2","text":"Parameter Type Doc key_pressed int key code of key pressed","title":"Parameters"},{"location":"DocstringGenerated/Popups/#_draw_2","text":"def _draw(self) Uses base class draw function","title":"_draw"},{"location":"DocstringGenerated/Popups/#textboxpopuppopu","text":"class TextBoxPopup(Popup, py_cui.ui.TextBoxImplementation) Class representing a textbox popup","title":"TextBoxPopup(Popu"},{"location":"DocstringGenerated/Popups/#attributes_2","text":"Attribute Type Doc _command function The command to run when enter is pressed","title":"Attributes"},{"location":"DocstringGenerated/Popups/#methods_3","text":"Method Doc update_height_width Need to update all cursor positions on resize _handle_key_press Override of base handle key press function _draw Override of base draw function","title":"Methods"},{"location":"DocstringGenerated/Popups/#init_3","text":"def __init__(self, root, title, color, command, renderer, password, logger) Initializer for textbox popup. Uses TextBoxImplementation as base","title":"init"},{"location":"DocstringGenerated/Popups/#update_height_width","text":"def update_height_width(self) Need to update all cursor positions on resize","title":"update_height_width"},{"location":"DocstringGenerated/Popups/#_handle_key_press_2","text":"def _handle_key_press(self, key_pressed) Override of base handle key press function","title":"_handle_key_press"},{"location":"DocstringGenerated/Popups/#parameters_3","text":"Parameter Type Doc key_pressed int key code of key pressed","title":"Parameters"},{"location":"DocstringGenerated/Popups/#_draw_3","text":"def _draw(self) Override of base draw function","title":"_draw"},{"location":"DocstringGenerated/Popups/#menupopuppopu","text":"class MenuPopup(Popup, py_cui.ui.MenuImplementation) A scroll menu popup. Allows for popup with several menu items to select from","title":"MenuPopup(Popu"},{"location":"DocstringGenerated/Popups/#attributes_3","text":"Attribute Type Doc _command function a function that takes a single string parameter, run when ENTER pressed _run_command_if_none bool Runs command even if there are no menu items (passes None)","title":"Attributes"},{"location":"DocstringGenerated/Popups/#methods_4","text":"Method Doc _handle_key_press Override of base handle key press function _draw Overrides base class draw function","title":"Methods"},{"location":"DocstringGenerated/Popups/#init_4","text":"def __init__(self, root, items, title, color, command, renderer, logger, run_command_if_none) Initializer for MenuPopup. Uses MenuImplementation as base","title":"init"},{"location":"DocstringGenerated/Popups/#_handle_key_press_3","text":"def _handle_key_press(self, key_pressed) Override of base handle key press function Enter key runs command, Escape key closes menu","title":"_handle_key_press"},{"location":"DocstringGenerated/Popups/#parameters_4","text":"Parameter Type Doc key_pressed int key code of key pressed","title":"Parameters"},{"location":"DocstringGenerated/Popups/#_draw_4","text":"def _draw(self) Overrides base class draw function","title":"_draw"},{"location":"DocstringGenerated/Popups/#loadingiconpopuppopup","text":"class LoadingIconPopup(Popup) Loading icon popup class MUST BE USED WITH A FORM OF ASYNC/THREADING","title":"LoadingIconPopup(Popup)"},{"location":"DocstringGenerated/Popups/#attributes_4","text":"Attribute Type Doc _loading_icons list of str Animation frames for loading icon _icon_counter int Current frame of animation _message str Loading message","title":"Attributes"},{"location":"DocstringGenerated/Popups/#methods_5","text":"Method Doc _handle_key_press Override of base class function. _draw Overrides base draw function","title":"Methods"},{"location":"DocstringGenerated/Popups/#init_5","text":"def __init__(self, root, title, message, color, renderer, logger) Initializer for LoadingIconPopup","title":"init"},{"location":"DocstringGenerated/Popups/#_handle_key_press_4","text":"def _handle_key_press(self, key_pressed) Override of base class function. Loading icon popups cannot be cancelled, so we wish to avoid default behavior","title":"_handle_key_press"},{"location":"DocstringGenerated/Popups/#parameters_5","text":"Parameter Type Doc key_pressed int key code of pressed key","title":"Parameters"},{"location":"DocstringGenerated/Popups/#_draw_5","text":"def _draw(self) Overrides base draw function","title":"_draw"},{"location":"DocstringGenerated/Popups/#loadingbarpopuppopup","text":"class LoadingBarPopup(Popup) Class for Loading Bar Popup MUST BE USED WITH A FORM OF ASYNC/THREADING","title":"LoadingBarPopup(Popup)"},{"location":"DocstringGenerated/Popups/#attributes_5","text":"Attribute Type Doc num_items int NUmber of items to count through completed_items int counter for completed items","title":"Attributes"},{"location":"DocstringGenerated/Popups/#methods_6","text":"Method Doc _handle_key_press Override of base class function. _increment_counter Function that increments an internal counter _draw Override of base draw function","title":"Methods"},{"location":"DocstringGenerated/Popups/#init_6","text":"def __init__(self, root, title, num_items, color, renderer, logger) Initializer for LoadingBarPopup","title":"init"},{"location":"DocstringGenerated/Popups/#_handle_key_press_5","text":"def _handle_key_press(self, key_pressed) Override of base class function. Loading icon popups cannot be cancelled, so we wish to avoid default behavior","title":"_handle_key_press"},{"location":"DocstringGenerated/Popups/#parameters_6","text":"Parameter Type Doc key_pressed int key code of pressed key","title":"Parameters"},{"location":"DocstringGenerated/Popups/#_increment_counter_1","text":"def _increment_counter(self) Function that increments an internal counter","title":"_increment_counter"},{"location":"DocstringGenerated/Popups/#_draw_6","text":"def _draw(self) Override of base draw function","title":"_draw"},{"location":"DocstringGenerated/PyCui/","text":"py_cui A python library for creating command line based user interfaces. @author: Jakub Wlodek @created: 12-Aug-2019 Classes Class Doc PyCUI Base CUI class Functions Function Doc fit_text Fits text to screen size fit_text def fit_text(width, text, center=False) Fits text to screen size Helper function to fit text within a given width. Used to fix issue with status/title bar text being too long Parameters Parameter Type Doc width int width of window in characters text str input text center Boolean flag to center text Returns Return Variable Type Doc fitted_text str text fixed depending on width PyCUI class PyCUI Base CUI class Main user interface class for py_cui. To create a user interface, you must first create an instance of this class, and then add cells + widgets to it. Attributes Attribute Type Doc cursor_x, cursor_y int absolute position of the cursor in the CUI grid py_cui.grid.Grid The main layout manager for the CUI widgets dict of str - py_cui.widgets.Widget dict of widget in the grid title_bar py_cui.statusbar.StatusBar a status bar object that gets drawn at the top of the CUI status_bar py_cui.statusbar.StatusBar a status bar object that gets drawn at the bottom of the CUI keybindings list of py_cui.keybinding.KeyBinding list of keybindings to check against in the main CUI loop height, width int height of the terminal in characters, width of terminal in characters exit_key key_code a key code for a key that exits the CUI simulated_terminal List[int] Dimensions for an alternative simulated terminal (used for testing) Methods Method Doc enable_logging Function enables logging for py_cui library apply_widget_set Function that replaces all widgets in a py_cui with those of a different widget set create_new_widget_set Function that is used to create additional widget sets start Function that starts the CUI stop Function that stops the CUI, and fires the callback function. run_on_exit Sets callback function on CUI exit. Must be a no-argument function or lambda function set_title Sets the title bar text set_status_bar_text Sets the status bar text when in overview mode _initialize_colors Function for initialzing curses colors. Called when CUI is first created. _initialize_widget_renderer Function that creates the renderer object that will draw each widget toggle_unicode_borders Function for toggling unicode based border rendering set_widget_border_characters Function that can be used to set arbitrary border characters for drawing widget borders by renderer. get_widgets Function that gets current set of widgets add_scroll_menu Function that adds a new scroll menu to the CUI grid add_checkbox_menu Function that adds a new checkbox menu to the CUI grid add_text_box Function that adds a new text box to the CUI grid add_text_block Function that adds a new text block to the CUI grid add_label Function that adds a new label to the CUI grid add_block_label Function that adds a new block label to the CUI grid add_button Function that adds a new button to the CUI grid _get_horizontal_neighbors Gets all horizontal (left, right) neighbor widgets _get_vertical_neighbors Gets all vertical (up, down) neighbor widgets _check_if_neighbor_exists Function that checks if widget has neighbor in specified cell. get_selected_widget Function that gets currently selected widget set_selected_widget Function that sets the selected widget for the CUI lose_focus Function that forces py_cui out of focus mode. move_focus Moves focus mode to different widget add_key_command Function that adds a keybinding to the CUI when in overview mode show_message_popup Shows a message popup show_warning_popup Shows a warning popup show_error_popup Shows an error popup show_yes_no_popup Shows a yes/no popup. show_text_box_popup Shows a textbox popup. show_menu_popup Shows a menu popup. show_loading_icon_popup Shows a loading icon popup show_loading_bar_popup Shows loading bar popup. increment_loading_bar Increments progress bar if loading bar popup is open stop_loading_popup Leaves loading state, and closes popup. close_popup Closes the popup, and resets focus _refresh_height_width Function that updates the height and width of the CUI based on terminal window size get_absolute_size Returns dimensions of CUI _draw_widgets Function that draws all of the widgets to the screen _draw_status_bars Draws status bar and title bar _display_window_warning Function that prints some basic error info if there is an error with the CUI _handle_key_presses Function that handles all main loop key presses. _draw Main CUI draw loop called by start() format Override of base format function. Prints list of current widgets. init def __init__(self, num_rows, num_cols, auto_focus_buttons=True, exit_key=py_cui.keys.KEY_Q_LOWER, simulated_terminal=None) Constructor for PyCUI class enable_logging def enable_logging(self, log_file_path='py_cui_log.txt', logging_level = logging.DEBUG) Function enables logging for py_cui library Parameters Parameter Type Doc log_file_path str The target log filepath. Default 'py_cui_log.txt logging_level int Default logging level = logging.DEBUG apply_widget_set def apply_widget_set(self, new_widget_set) Function that replaces all widgets in a py_cui with those of a different widget set Parameters Parameter Type Doc new_widget_set WidgetSet The new widget set to switch to create_new_widget_set def create_new_widget_set(self, num_rows, num_cols) Function that is used to create additional widget sets Use this function instead of directly creating widget set object instances, to allow for logging support. Parameters Parameter Type Doc num_rows int row count for new widget set num_cols int column count for new widget set Returns Return Variable Type Doc new_widget_set py_cui.widget_set.WidgetSet The new widget set object instance start def start(self) Function that starts the CUI stop def stop(self) Function that stops the CUI, and fires the callback function. Callback must be a no arg method run_on_exit def run_on_exit(self, command) Sets callback function on CUI exit. Must be a no-argument function or lambda function Parameters Parameter Type Doc command function A no-argument or lambda function to be fired on exit set_title def set_title(self, title) Sets the title bar text Parameters Parameter Type Doc title str New title for CUI set_status_bar_text def set_status_bar_text(self, text) Sets the status bar text when in overview mode Parameters Parameter Type Doc text str Status bar text _initialize_colors def _initialize_colors(self) Function for initialzing curses colors. Called when CUI is first created. _initialize_widget_renderer def _initialize_widget_renderer(self) Function that creates the renderer object that will draw each widget toggle_unicode_borders def toggle_unicode_borders(self) Function for toggling unicode based border rendering set_widget_border_characters def set_widget_border_characters(self, upper_left_corner, upper_right_corner, lower_left_corner, lower_right_corner, horizontal, vertical) Function that can be used to set arbitrary border characters for drawing widget borders by renderer. Parameters Parameter Type Doc upper_left_corner char Upper left corner character upper_right_corner char Upper right corner character lower_left_corner char Upper left corner character lower_right_corner char Lower right corner character horizontal char Horizontal border character vertical char Vertical border character get_widgets def get_widgets(self) Function that gets current set of widgets Returns Return Variable Type Doc widgets dict of str -> widget dictionary mapping widget IDs to object instances add_scroll_menu def add_scroll_menu(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) Function that adds a new scroll menu to the CUI grid Parameters Parameter Type Doc title str The title of the scroll menu row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction Returns Return Variable Type Doc new_scroll_menu ScrollMenu A reference to the created scroll menu object. add_checkbox_menu def add_checkbox_menu(self, title, row, column, row_span=1, column_span=1, padx=1, pady=0, checked_char='X') Function that adds a new checkbox menu to the CUI grid Parameters Parameter Type Doc title str The title of the checkbox row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction checked_char='X' char The character used to mark 'Checked' items Returns Return Variable Type Doc new_checkbox_menu CheckBoxMenu A reference to the created checkbox object. add_text_box def add_text_box(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, initial_text = '', password = False) Function that adds a new text box to the CUI grid Parameters Parameter Type Doc title str The title of the textbox row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction initial_text='' str Initial text for the textbox password=False bool Toggle to show '*' instead of characters. Returns Return Variable Type Doc new_text_box TextBox A reference to the created textbox object. add_text_block def add_text_block(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, initial_text = '') Function that adds a new text block to the CUI grid Parameters Parameter Type Doc title str The title of the text block row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction initial_text='' str Initial text for the text block Returns Return Variable Type Doc new_text_block ScrollTextBlock A reference to the created textblock object. add_label def add_label(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) Function that adds a new label to the CUI grid Parameters Parameter Type Doc title str The title of the label row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction Returns Return Variable Type Doc new_label Label A reference to the created label object. add_block_label def add_block_label(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, center=True) Function that adds a new block label to the CUI grid Parameters Parameter Type Doc title str The title of the block label row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction center bool flag to tell label to be centered or left-aligned. Returns Return Variable Type Doc new_label BlockLabel A reference to the created block label object. add_button def add_button(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, command=None) Function that adds a new button to the CUI grid Parameters Parameter Type Doc title str The title of the button row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction command=None Function A no-argument or lambda function to fire on button press. Returns Return Variable Type Doc new_button Button A reference to the created button object. _get_horizontal_neighbors def _get_horizontal_neighbors(self, widget, direction) Gets all horizontal (left, right) neighbor widgets Parameters Parameter Type Doc widget py_cui.widgets.Widget The currently selected widget direction py_cui.keys.KEY* must be an arrow key value Returns Return Variable Type Doc id_list list[] A list of the neighbor widget ids _get_vertical_neighbors def _get_vertical_neighbors(self, widget, direction) Gets all vertical (up, down) neighbor widgets Parameters Parameter Type Doc widget py_cui.widgets.Widget The currently selected widget direction py_cui.keys.KEY* must be an arrow key value Returns Return Variable Type Doc id_list list[] A list of the neighbor widget ids _check_if_neighbor_exists def _check_if_neighbor_exists(self, direction) Function that checks if widget has neighbor in specified cell. Used for navigating CUI, as arrow keys find the immediate neighbor Parameters Parameter Type Doc direction py_cui.keys.KEY_* The direction in which to search Returns Return Variable Type Doc widget_id str The widget neighbor ID if found, None otherwise get_selected_widget def get_selected_widget(self) Function that gets currently selected widget Returns Return Variable Type Doc selected_widget py_cui.widgets.Widget Reference to currently selected widget object set_selected_widget def set_selected_widget(self, widget_id) Function that sets the selected widget for the CUI Parameters Parameter Type Doc widget_id str the id of the widget to select lose_focus def lose_focus(self) Function that forces py_cui out of focus mode. After popup is called, focus is lost move_focus def move_focus(self, widget) Moves focus mode to different widget Parameters Parameter Type Doc widget Widget The widget object we want to move focus to. add_key_command def add_key_command(self, key, command) Function that adds a keybinding to the CUI when in overview mode Parameters Parameter Type Doc key py_cui.keys.KEY_* The key bound to the command command Function A no-arg or lambda function to fire on keypress show_message_popup def show_message_popup(self, title, text) Shows a message popup Parameters Parameter Type Doc title str Message title text str Message text show_warning_popup def show_warning_popup(self, title, text) Shows a warning popup Parameters Parameter Type Doc title str Warning title text str Warning text show_error_popup def show_error_popup(self, title, text) Shows an error popup Parameters Parameter Type Doc title str Error title text str Error text show_yes_no_popup def show_yes_no_popup(self, title, command) Shows a yes/no popup. The 'command' parameter must be a function with a single boolean parameter Parameters Parameter Type Doc title str Message title command function A function taking in a single boolean parameter. Will be fired with True if yes selected, false otherwise show_text_box_popup def show_text_box_popup(self, title, command, password=False) Shows a textbox popup. The 'command' parameter must be a function with a single string parameter Parameters Parameter Type Doc title str Message title command Function A function with a single string parameter, fired with contents of textbox when enter key pressed password=False bool If true, write characters as '*' show_menu_popup def show_menu_popup(self, title, menu_items, command, run_command_if_none=False) Shows a menu popup. The 'command' parameter must be a function with a single string parameter Parameters Parameter Type Doc title str menu title menu_items list of str A list of menu items command Function A function taking in a single string argument. Fired with selected menu item when ENTER pressed. run_command_if_none=False bool If True, will run command passing in None if no menu item selected. show_loading_icon_popup def show_loading_icon_popup(self, title, message, callback=None) Shows a loading icon popup Parameters Parameter Type Doc title str Message title message str Message text. Will show as '$message...' callback=None Function If not none, fired after loading is completed. Must be a no-arg function show_loading_bar_popup def show_loading_bar_popup(self, title, num_items, callback=None) Shows loading bar popup. Use 'increment_loading_bar' to show progress Parameters Parameter Type Doc title str Message title num_items int Number of items to iterate through for loading callback=None Function If not none, fired after loading is completed. Must be a no-arg function increment_loading_bar def increment_loading_bar(self) Increments progress bar if loading bar popup is open stop_loading_popup def stop_loading_popup(self) Leaves loading state, and closes popup. Must be called by user to escape loading. close_popup def close_popup(self) Closes the popup, and resets focus _refresh_height_width def _refresh_height_width(self, height, width) Function that updates the height and width of the CUI based on terminal window size Parameters Parameter Type Doc height int Window height in terminal characters width int Window width in terminal characters get_absolute_size def get_absolute_size(self) Returns dimensions of CUI Returns Return Variable Type Doc height, width int The dimensions of drawable CUI space in characters _draw_widgets def _draw_widgets(self) Function that draws all of the widgets to the screen _draw_status_bars def _draw_status_bars(self, stdscr, height, width) Draws status bar and title bar Parameters Parameter Type Doc stdscr curses Standard cursor The cursor used to draw the status bar height int Window height in terminal characters width int Window width in terminal characters _display_window_warning def _display_window_warning(self, stdscr, error_info) Function that prints some basic error info if there is an error with the CUI Parameters Parameter Type Doc stdscr curses Standard cursor The cursor used to draw the warning error_info str The information regarding the error. _handle_key_presses def _handle_key_presses(self, key_pressed) Function that handles all main loop key presses. Parameters Parameter Type Doc key_pressed py_cui.keys.KEY_* The key being pressed _draw def _draw(self, stdscr) Main CUI draw loop called by start() Parameters Parameter Type Doc stdscr curses Standard cursor The cursor used to draw the CUI format def __format__(self, fmt) Override of base format function. Prints list of current widgets. Parameters Parameter Type Doc fmt Format The format to override","title":"PyCUI"},{"location":"DocstringGenerated/PyCui/#py_cui","text":"A python library for creating command line based user interfaces. @author: Jakub Wlodek @created: 12-Aug-2019","title":"py_cui"},{"location":"DocstringGenerated/PyCui/#classes","text":"Class Doc PyCUI Base CUI class","title":"Classes"},{"location":"DocstringGenerated/PyCui/#functions","text":"Function Doc fit_text Fits text to screen size","title":"Functions"},{"location":"DocstringGenerated/PyCui/#fit_text","text":"def fit_text(width, text, center=False) Fits text to screen size Helper function to fit text within a given width. Used to fix issue with status/title bar text being too long","title":"fit_text"},{"location":"DocstringGenerated/PyCui/#parameters","text":"Parameter Type Doc width int width of window in characters text str input text center Boolean flag to center text","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#returns","text":"Return Variable Type Doc fitted_text str text fixed depending on width","title":"Returns"},{"location":"DocstringGenerated/PyCui/#pycui","text":"class PyCUI Base CUI class Main user interface class for py_cui. To create a user interface, you must first create an instance of this class, and then add cells + widgets to it.","title":"PyCUI"},{"location":"DocstringGenerated/PyCui/#attributes","text":"Attribute Type Doc cursor_x, cursor_y int absolute position of the cursor in the CUI grid py_cui.grid.Grid The main layout manager for the CUI widgets dict of str - py_cui.widgets.Widget dict of widget in the grid title_bar py_cui.statusbar.StatusBar a status bar object that gets drawn at the top of the CUI status_bar py_cui.statusbar.StatusBar a status bar object that gets drawn at the bottom of the CUI keybindings list of py_cui.keybinding.KeyBinding list of keybindings to check against in the main CUI loop height, width int height of the terminal in characters, width of terminal in characters exit_key key_code a key code for a key that exits the CUI simulated_terminal List[int] Dimensions for an alternative simulated terminal (used for testing)","title":"Attributes"},{"location":"DocstringGenerated/PyCui/#methods","text":"Method Doc enable_logging Function enables logging for py_cui library apply_widget_set Function that replaces all widgets in a py_cui with those of a different widget set create_new_widget_set Function that is used to create additional widget sets start Function that starts the CUI stop Function that stops the CUI, and fires the callback function. run_on_exit Sets callback function on CUI exit. Must be a no-argument function or lambda function set_title Sets the title bar text set_status_bar_text Sets the status bar text when in overview mode _initialize_colors Function for initialzing curses colors. Called when CUI is first created. _initialize_widget_renderer Function that creates the renderer object that will draw each widget toggle_unicode_borders Function for toggling unicode based border rendering set_widget_border_characters Function that can be used to set arbitrary border characters for drawing widget borders by renderer. get_widgets Function that gets current set of widgets add_scroll_menu Function that adds a new scroll menu to the CUI grid add_checkbox_menu Function that adds a new checkbox menu to the CUI grid add_text_box Function that adds a new text box to the CUI grid add_text_block Function that adds a new text block to the CUI grid add_label Function that adds a new label to the CUI grid add_block_label Function that adds a new block label to the CUI grid add_button Function that adds a new button to the CUI grid _get_horizontal_neighbors Gets all horizontal (left, right) neighbor widgets _get_vertical_neighbors Gets all vertical (up, down) neighbor widgets _check_if_neighbor_exists Function that checks if widget has neighbor in specified cell. get_selected_widget Function that gets currently selected widget set_selected_widget Function that sets the selected widget for the CUI lose_focus Function that forces py_cui out of focus mode. move_focus Moves focus mode to different widget add_key_command Function that adds a keybinding to the CUI when in overview mode show_message_popup Shows a message popup show_warning_popup Shows a warning popup show_error_popup Shows an error popup show_yes_no_popup Shows a yes/no popup. show_text_box_popup Shows a textbox popup. show_menu_popup Shows a menu popup. show_loading_icon_popup Shows a loading icon popup show_loading_bar_popup Shows loading bar popup. increment_loading_bar Increments progress bar if loading bar popup is open stop_loading_popup Leaves loading state, and closes popup. close_popup Closes the popup, and resets focus _refresh_height_width Function that updates the height and width of the CUI based on terminal window size get_absolute_size Returns dimensions of CUI _draw_widgets Function that draws all of the widgets to the screen _draw_status_bars Draws status bar and title bar _display_window_warning Function that prints some basic error info if there is an error with the CUI _handle_key_presses Function that handles all main loop key presses. _draw Main CUI draw loop called by start() format Override of base format function. Prints list of current widgets.","title":"Methods"},{"location":"DocstringGenerated/PyCui/#init","text":"def __init__(self, num_rows, num_cols, auto_focus_buttons=True, exit_key=py_cui.keys.KEY_Q_LOWER, simulated_terminal=None) Constructor for PyCUI class","title":"init"},{"location":"DocstringGenerated/PyCui/#enable_logging","text":"def enable_logging(self, log_file_path='py_cui_log.txt', logging_level = logging.DEBUG) Function enables logging for py_cui library","title":"enable_logging"},{"location":"DocstringGenerated/PyCui/#parameters_1","text":"Parameter Type Doc log_file_path str The target log filepath. Default 'py_cui_log.txt logging_level int Default logging level = logging.DEBUG","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#apply_widget_set","text":"def apply_widget_set(self, new_widget_set) Function that replaces all widgets in a py_cui with those of a different widget set","title":"apply_widget_set"},{"location":"DocstringGenerated/PyCui/#parameters_2","text":"Parameter Type Doc new_widget_set WidgetSet The new widget set to switch to","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#create_new_widget_set","text":"def create_new_widget_set(self, num_rows, num_cols) Function that is used to create additional widget sets Use this function instead of directly creating widget set object instances, to allow for logging support.","title":"create_new_widget_set"},{"location":"DocstringGenerated/PyCui/#parameters_3","text":"Parameter Type Doc num_rows int row count for new widget set num_cols int column count for new widget set","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#returns_1","text":"Return Variable Type Doc new_widget_set py_cui.widget_set.WidgetSet The new widget set object instance","title":"Returns"},{"location":"DocstringGenerated/PyCui/#start","text":"def start(self) Function that starts the CUI","title":"start"},{"location":"DocstringGenerated/PyCui/#stop","text":"def stop(self) Function that stops the CUI, and fires the callback function. Callback must be a no arg method","title":"stop"},{"location":"DocstringGenerated/PyCui/#run_on_exit","text":"def run_on_exit(self, command) Sets callback function on CUI exit. Must be a no-argument function or lambda function","title":"run_on_exit"},{"location":"DocstringGenerated/PyCui/#parameters_4","text":"Parameter Type Doc command function A no-argument or lambda function to be fired on exit","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#set_title","text":"def set_title(self, title) Sets the title bar text","title":"set_title"},{"location":"DocstringGenerated/PyCui/#parameters_5","text":"Parameter Type Doc title str New title for CUI","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#set_status_bar_text","text":"def set_status_bar_text(self, text) Sets the status bar text when in overview mode","title":"set_status_bar_text"},{"location":"DocstringGenerated/PyCui/#parameters_6","text":"Parameter Type Doc text str Status bar text","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#_initialize_colors","text":"def _initialize_colors(self) Function for initialzing curses colors. Called when CUI is first created.","title":"_initialize_colors"},{"location":"DocstringGenerated/PyCui/#_initialize_widget_renderer","text":"def _initialize_widget_renderer(self) Function that creates the renderer object that will draw each widget","title":"_initialize_widget_renderer"},{"location":"DocstringGenerated/PyCui/#toggle_unicode_borders","text":"def toggle_unicode_borders(self) Function for toggling unicode based border rendering","title":"toggle_unicode_borders"},{"location":"DocstringGenerated/PyCui/#set_widget_border_characters","text":"def set_widget_border_characters(self, upper_left_corner, upper_right_corner, lower_left_corner, lower_right_corner, horizontal, vertical) Function that can be used to set arbitrary border characters for drawing widget borders by renderer.","title":"set_widget_border_characters"},{"location":"DocstringGenerated/PyCui/#parameters_7","text":"Parameter Type Doc upper_left_corner char Upper left corner character upper_right_corner char Upper right corner character lower_left_corner char Upper left corner character lower_right_corner char Lower right corner character horizontal char Horizontal border character vertical char Vertical border character","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#get_widgets","text":"def get_widgets(self) Function that gets current set of widgets","title":"get_widgets"},{"location":"DocstringGenerated/PyCui/#returns_2","text":"Return Variable Type Doc widgets dict of str -> widget dictionary mapping widget IDs to object instances","title":"Returns"},{"location":"DocstringGenerated/PyCui/#add_scroll_menu","text":"def add_scroll_menu(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) Function that adds a new scroll menu to the CUI grid","title":"add_scroll_menu"},{"location":"DocstringGenerated/PyCui/#parameters_8","text":"Parameter Type Doc title str The title of the scroll menu row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#returns_3","text":"Return Variable Type Doc new_scroll_menu ScrollMenu A reference to the created scroll menu object.","title":"Returns"},{"location":"DocstringGenerated/PyCui/#add_checkbox_menu","text":"def add_checkbox_menu(self, title, row, column, row_span=1, column_span=1, padx=1, pady=0, checked_char='X') Function that adds a new checkbox menu to the CUI grid","title":"add_checkbox_menu"},{"location":"DocstringGenerated/PyCui/#parameters_9","text":"Parameter Type Doc title str The title of the checkbox row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction checked_char='X' char The character used to mark 'Checked' items","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#returns_4","text":"Return Variable Type Doc new_checkbox_menu CheckBoxMenu A reference to the created checkbox object.","title":"Returns"},{"location":"DocstringGenerated/PyCui/#add_text_box","text":"def add_text_box(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, initial_text = '', password = False) Function that adds a new text box to the CUI grid","title":"add_text_box"},{"location":"DocstringGenerated/PyCui/#parameters_10","text":"Parameter Type Doc title str The title of the textbox row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction initial_text='' str Initial text for the textbox password=False bool Toggle to show '*' instead of characters.","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#returns_5","text":"Return Variable Type Doc new_text_box TextBox A reference to the created textbox object.","title":"Returns"},{"location":"DocstringGenerated/PyCui/#add_text_block","text":"def add_text_block(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, initial_text = '') Function that adds a new text block to the CUI grid","title":"add_text_block"},{"location":"DocstringGenerated/PyCui/#parameters_11","text":"Parameter Type Doc title str The title of the text block row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction initial_text='' str Initial text for the text block","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#returns_6","text":"Return Variable Type Doc new_text_block ScrollTextBlock A reference to the created textblock object.","title":"Returns"},{"location":"DocstringGenerated/PyCui/#add_label","text":"def add_label(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) Function that adds a new label to the CUI grid","title":"add_label"},{"location":"DocstringGenerated/PyCui/#parameters_12","text":"Parameter Type Doc title str The title of the label row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#returns_7","text":"Return Variable Type Doc new_label Label A reference to the created label object.","title":"Returns"},{"location":"DocstringGenerated/PyCui/#add_block_label","text":"def add_block_label(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, center=True) Function that adds a new block label to the CUI grid","title":"add_block_label"},{"location":"DocstringGenerated/PyCui/#parameters_13","text":"Parameter Type Doc title str The title of the block label row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction center bool flag to tell label to be centered or left-aligned.","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#returns_8","text":"Return Variable Type Doc new_label BlockLabel A reference to the created block label object.","title":"Returns"},{"location":"DocstringGenerated/PyCui/#add_button","text":"def add_button(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, command=None) Function that adds a new button to the CUI grid","title":"add_button"},{"location":"DocstringGenerated/PyCui/#parameters_14","text":"Parameter Type Doc title str The title of the button row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction command=None Function A no-argument or lambda function to fire on button press.","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#returns_9","text":"Return Variable Type Doc new_button Button A reference to the created button object.","title":"Returns"},{"location":"DocstringGenerated/PyCui/#_get_horizontal_neighbors","text":"def _get_horizontal_neighbors(self, widget, direction) Gets all horizontal (left, right) neighbor widgets","title":"_get_horizontal_neighbors"},{"location":"DocstringGenerated/PyCui/#parameters_15","text":"Parameter Type Doc widget py_cui.widgets.Widget The currently selected widget direction py_cui.keys.KEY* must be an arrow key value","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#returns_10","text":"Return Variable Type Doc id_list list[] A list of the neighbor widget ids","title":"Returns"},{"location":"DocstringGenerated/PyCui/#_get_vertical_neighbors","text":"def _get_vertical_neighbors(self, widget, direction) Gets all vertical (up, down) neighbor widgets","title":"_get_vertical_neighbors"},{"location":"DocstringGenerated/PyCui/#parameters_16","text":"Parameter Type Doc widget py_cui.widgets.Widget The currently selected widget direction py_cui.keys.KEY* must be an arrow key value","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#returns_11","text":"Return Variable Type Doc id_list list[] A list of the neighbor widget ids","title":"Returns"},{"location":"DocstringGenerated/PyCui/#_check_if_neighbor_exists","text":"def _check_if_neighbor_exists(self, direction) Function that checks if widget has neighbor in specified cell. Used for navigating CUI, as arrow keys find the immediate neighbor","title":"_check_if_neighbor_exists"},{"location":"DocstringGenerated/PyCui/#parameters_17","text":"Parameter Type Doc direction py_cui.keys.KEY_* The direction in which to search","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#returns_12","text":"Return Variable Type Doc widget_id str The widget neighbor ID if found, None otherwise","title":"Returns"},{"location":"DocstringGenerated/PyCui/#get_selected_widget","text":"def get_selected_widget(self) Function that gets currently selected widget","title":"get_selected_widget"},{"location":"DocstringGenerated/PyCui/#returns_13","text":"Return Variable Type Doc selected_widget py_cui.widgets.Widget Reference to currently selected widget object","title":"Returns"},{"location":"DocstringGenerated/PyCui/#set_selected_widget","text":"def set_selected_widget(self, widget_id) Function that sets the selected widget for the CUI","title":"set_selected_widget"},{"location":"DocstringGenerated/PyCui/#parameters_18","text":"Parameter Type Doc widget_id str the id of the widget to select","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#lose_focus","text":"def lose_focus(self) Function that forces py_cui out of focus mode. After popup is called, focus is lost","title":"lose_focus"},{"location":"DocstringGenerated/PyCui/#move_focus","text":"def move_focus(self, widget) Moves focus mode to different widget","title":"move_focus"},{"location":"DocstringGenerated/PyCui/#parameters_19","text":"Parameter Type Doc widget Widget The widget object we want to move focus to.","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#add_key_command","text":"def add_key_command(self, key, command) Function that adds a keybinding to the CUI when in overview mode","title":"add_key_command"},{"location":"DocstringGenerated/PyCui/#parameters_20","text":"Parameter Type Doc key py_cui.keys.KEY_* The key bound to the command command Function A no-arg or lambda function to fire on keypress","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#show_message_popup","text":"def show_message_popup(self, title, text) Shows a message popup","title":"show_message_popup"},{"location":"DocstringGenerated/PyCui/#parameters_21","text":"Parameter Type Doc title str Message title text str Message text","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#show_warning_popup","text":"def show_warning_popup(self, title, text) Shows a warning popup","title":"show_warning_popup"},{"location":"DocstringGenerated/PyCui/#parameters_22","text":"Parameter Type Doc title str Warning title text str Warning text","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#show_error_popup","text":"def show_error_popup(self, title, text) Shows an error popup","title":"show_error_popup"},{"location":"DocstringGenerated/PyCui/#parameters_23","text":"Parameter Type Doc title str Error title text str Error text","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#show_yes_no_popup","text":"def show_yes_no_popup(self, title, command) Shows a yes/no popup. The 'command' parameter must be a function with a single boolean parameter","title":"show_yes_no_popup"},{"location":"DocstringGenerated/PyCui/#parameters_24","text":"Parameter Type Doc title str Message title command function A function taking in a single boolean parameter. Will be fired with True if yes selected, false otherwise","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#show_text_box_popup","text":"def show_text_box_popup(self, title, command, password=False) Shows a textbox popup. The 'command' parameter must be a function with a single string parameter","title":"show_text_box_popup"},{"location":"DocstringGenerated/PyCui/#parameters_25","text":"Parameter Type Doc title str Message title command Function A function with a single string parameter, fired with contents of textbox when enter key pressed password=False bool If true, write characters as '*'","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#show_menu_popup","text":"def show_menu_popup(self, title, menu_items, command, run_command_if_none=False) Shows a menu popup. The 'command' parameter must be a function with a single string parameter","title":"show_menu_popup"},{"location":"DocstringGenerated/PyCui/#parameters_26","text":"Parameter Type Doc title str menu title menu_items list of str A list of menu items command Function A function taking in a single string argument. Fired with selected menu item when ENTER pressed. run_command_if_none=False bool If True, will run command passing in None if no menu item selected.","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#show_loading_icon_popup","text":"def show_loading_icon_popup(self, title, message, callback=None) Shows a loading icon popup","title":"show_loading_icon_popup"},{"location":"DocstringGenerated/PyCui/#parameters_27","text":"Parameter Type Doc title str Message title message str Message text. Will show as '$message...' callback=None Function If not none, fired after loading is completed. Must be a no-arg function","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#show_loading_bar_popup","text":"def show_loading_bar_popup(self, title, num_items, callback=None) Shows loading bar popup. Use 'increment_loading_bar' to show progress","title":"show_loading_bar_popup"},{"location":"DocstringGenerated/PyCui/#parameters_28","text":"Parameter Type Doc title str Message title num_items int Number of items to iterate through for loading callback=None Function If not none, fired after loading is completed. Must be a no-arg function","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#increment_loading_bar","text":"def increment_loading_bar(self) Increments progress bar if loading bar popup is open","title":"increment_loading_bar"},{"location":"DocstringGenerated/PyCui/#stop_loading_popup","text":"def stop_loading_popup(self) Leaves loading state, and closes popup. Must be called by user to escape loading.","title":"stop_loading_popup"},{"location":"DocstringGenerated/PyCui/#close_popup","text":"def close_popup(self) Closes the popup, and resets focus","title":"close_popup"},{"location":"DocstringGenerated/PyCui/#_refresh_height_width","text":"def _refresh_height_width(self, height, width) Function that updates the height and width of the CUI based on terminal window size","title":"_refresh_height_width"},{"location":"DocstringGenerated/PyCui/#parameters_29","text":"Parameter Type Doc height int Window height in terminal characters width int Window width in terminal characters","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#get_absolute_size","text":"def get_absolute_size(self) Returns dimensions of CUI","title":"get_absolute_size"},{"location":"DocstringGenerated/PyCui/#returns_14","text":"Return Variable Type Doc height, width int The dimensions of drawable CUI space in characters","title":"Returns"},{"location":"DocstringGenerated/PyCui/#_draw_widgets","text":"def _draw_widgets(self) Function that draws all of the widgets to the screen","title":"_draw_widgets"},{"location":"DocstringGenerated/PyCui/#_draw_status_bars","text":"def _draw_status_bars(self, stdscr, height, width) Draws status bar and title bar","title":"_draw_status_bars"},{"location":"DocstringGenerated/PyCui/#parameters_30","text":"Parameter Type Doc stdscr curses Standard cursor The cursor used to draw the status bar height int Window height in terminal characters width int Window width in terminal characters","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#_display_window_warning","text":"def _display_window_warning(self, stdscr, error_info) Function that prints some basic error info if there is an error with the CUI","title":"_display_window_warning"},{"location":"DocstringGenerated/PyCui/#parameters_31","text":"Parameter Type Doc stdscr curses Standard cursor The cursor used to draw the warning error_info str The information regarding the error.","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#_handle_key_presses","text":"def _handle_key_presses(self, key_pressed) Function that handles all main loop key presses.","title":"_handle_key_presses"},{"location":"DocstringGenerated/PyCui/#parameters_32","text":"Parameter Type Doc key_pressed py_cui.keys.KEY_* The key being pressed","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#_draw","text":"def _draw(self, stdscr) Main CUI draw loop called by start()","title":"_draw"},{"location":"DocstringGenerated/PyCui/#parameters_33","text":"Parameter Type Doc stdscr curses Standard cursor The cursor used to draw the CUI","title":"Parameters"},{"location":"DocstringGenerated/PyCui/#format","text":"def __format__(self, fmt) Override of base format function. Prints list of current widgets.","title":"format"},{"location":"DocstringGenerated/PyCui/#parameters_34","text":"Parameter Type Doc fmt Format The format to override","title":"Parameters"},{"location":"DocstringGenerated/Renderer/","text":"renderer Module containing the py_cui renderer. It is used to draw all of the onscreen ui_elements and items. @author: Jakub Wlodek @created: 12-Aug-2019 Classes Class Doc Renderer Main renderer class used for drawing ui_elements to the terminal. Renderer class Renderer Main renderer class used for drawing ui_elements to the terminal. Has helper functions for drawing the borders, cursor, and text required for the cui. All of the functions supplied by the renderer class should only be used internally. Attributes Attribute Type Doc root py_cui.PyCUI The parent window stdscr standard cursor The cursor with which renderer draws text color_rules list of py_cui.colors.ColorRule List of currently loaded rules to apply during drawing Methods Method Doc _set_border_renderer_chars Function that sets the border characters for ui_elements _set_bold Sets bold draw mode _unset_bold Unsets bold draw mode set_color_rules Sets current color rules set_color_mode Sets the output color mode unset_color_mode Unsets the output color mode reset_cursor Positions the cursor at the bottom right of the selected element draw_cursor Draws the cursor at a particular location draw_border Draws ascii border around ui element _draw_border_top Internal function for drawing top of border _draw_border_bottom Internal function for drawing bottom of border _draw_blank_row Internal function for drawing a blank row _get_render_text Internal function that computes the scope of the text that should be drawn _generate_text_color_fragments Function that applies color rules to text, dividing them if match is found draw_text Function that draws ui_element text. init def __init__(self, root, stdscr, logger) Constructor for renderer object _set_border_renderer_chars def _set_border_renderer_chars(self, border_char_set) Function that sets the border characters for ui_elements Parameters Parameter Type Doc border_characters Dict of str to str The border characters as specified by user _set_bold def _set_bold(self) Sets bold draw mode _unset_bold def _unset_bold(self) Unsets bold draw mode set_color_rules def set_color_rules(self, color_rules) Sets current color rules Parameters Parameter Type Doc color_rules List[py_cui.colors.ColorRule] List of currently loaded rules to apply during drawing set_color_mode def set_color_mode(self, color_mode) Sets the output color mode Parameters Parameter Type Doc color_mode int Color code to apply during drawing unset_color_mode def unset_color_mode(self, color_mode) Unsets the output color mode Parameters Parameter Type Doc color_mode int Color code to unapply during drawing reset_cursor def reset_cursor(self, ui_element, fill=True) Positions the cursor at the bottom right of the selected element Parameters Parameter Type Doc ui_element py_cui.ui.UIElement ui element for which to reset cursor fill bool a flag that tells the renderer if the element is filling its grid space, or not (ex. Textbox vs textblock) draw_cursor def draw_cursor(self, cursor_y, cursor_x) Draws the cursor at a particular location Parameters Parameter Type Doc cursor_x, cursor_y int x, y coordinates where to draw the cursor draw_border def draw_border(self, ui_element, fill=True, with_title=True) Draws ascii border around ui element Parameters Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn fill bool a flag that tells the renderer if the ui_element is filling its grid space, or not (ex. Textbox vs textblock) with_title bool flag that tells whether or not to draw ui_element title _draw_border_top def _draw_border_top(self, ui_element, y, with_title) Internal function for drawing top of border Parameters Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn y int the terminal row (top down) on which to draw the text with_title bool Flag that tells renderer if title should be superimposed into border. _draw_border_bottom def _draw_border_bottom(self, ui_element, y) Internal function for drawing bottom of border Parameters Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn y int the terminal row (top down) on which to draw the text _draw_blank_row def _draw_blank_row(self, ui_element, y) Internal function for drawing a blank row Parameters Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn y int the terminal row (top down) on which to draw the text _get_render_text def _get_render_text(self, ui_element, line, centered, bordered, start_pos) Internal function that computes the scope of the text that should be drawn Parameters Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn line str the line of text being drawn centered bool flag to set if the text should be centered bordered bool a flag to set if the text should be bordered start_pos int position to start rendering the text from. Returns Return Variable Type Doc render_text str The text shortened to fit within given space _generate_text_color_fragments def _generate_text_color_fragments(self, ui_element, line, render_text) Function that applies color rules to text, dividing them if match is found Parameters Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn line str the line of text being drawn render_text str The text shortened to fit within given space Returns Return Variable Type Doc fragments list of [int, str] list of text - color code combinations to write draw_text def draw_text(self, ui_element, line, y, centered = False, bordered = True, selected = False, start_pos = 0) Function that draws ui_element text. Parameters Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn line str the line of text being drawn y int the terminal row (top down) on which to draw the text centered bool flag to set if the text should be centered bordered bool a flag to set if the text should be bordered selected bool Flag that tells renderer if ui_element is selected. start_pos int position to start rendering the text from.","title":"Renderer"},{"location":"DocstringGenerated/Renderer/#renderer","text":"Module containing the py_cui renderer. It is used to draw all of the onscreen ui_elements and items. @author: Jakub Wlodek @created: 12-Aug-2019","title":"renderer"},{"location":"DocstringGenerated/Renderer/#classes","text":"Class Doc Renderer Main renderer class used for drawing ui_elements to the terminal.","title":"Classes"},{"location":"DocstringGenerated/Renderer/#renderer_1","text":"class Renderer Main renderer class used for drawing ui_elements to the terminal. Has helper functions for drawing the borders, cursor, and text required for the cui. All of the functions supplied by the renderer class should only be used internally.","title":"Renderer"},{"location":"DocstringGenerated/Renderer/#attributes","text":"Attribute Type Doc root py_cui.PyCUI The parent window stdscr standard cursor The cursor with which renderer draws text color_rules list of py_cui.colors.ColorRule List of currently loaded rules to apply during drawing","title":"Attributes"},{"location":"DocstringGenerated/Renderer/#methods","text":"Method Doc _set_border_renderer_chars Function that sets the border characters for ui_elements _set_bold Sets bold draw mode _unset_bold Unsets bold draw mode set_color_rules Sets current color rules set_color_mode Sets the output color mode unset_color_mode Unsets the output color mode reset_cursor Positions the cursor at the bottom right of the selected element draw_cursor Draws the cursor at a particular location draw_border Draws ascii border around ui element _draw_border_top Internal function for drawing top of border _draw_border_bottom Internal function for drawing bottom of border _draw_blank_row Internal function for drawing a blank row _get_render_text Internal function that computes the scope of the text that should be drawn _generate_text_color_fragments Function that applies color rules to text, dividing them if match is found draw_text Function that draws ui_element text.","title":"Methods"},{"location":"DocstringGenerated/Renderer/#init","text":"def __init__(self, root, stdscr, logger) Constructor for renderer object","title":"init"},{"location":"DocstringGenerated/Renderer/#_set_border_renderer_chars","text":"def _set_border_renderer_chars(self, border_char_set) Function that sets the border characters for ui_elements","title":"_set_border_renderer_chars"},{"location":"DocstringGenerated/Renderer/#parameters","text":"Parameter Type Doc border_characters Dict of str to str The border characters as specified by user","title":"Parameters"},{"location":"DocstringGenerated/Renderer/#_set_bold","text":"def _set_bold(self) Sets bold draw mode","title":"_set_bold"},{"location":"DocstringGenerated/Renderer/#_unset_bold","text":"def _unset_bold(self) Unsets bold draw mode","title":"_unset_bold"},{"location":"DocstringGenerated/Renderer/#set_color_rules","text":"def set_color_rules(self, color_rules) Sets current color rules","title":"set_color_rules"},{"location":"DocstringGenerated/Renderer/#parameters_1","text":"Parameter Type Doc color_rules List[py_cui.colors.ColorRule] List of currently loaded rules to apply during drawing","title":"Parameters"},{"location":"DocstringGenerated/Renderer/#set_color_mode","text":"def set_color_mode(self, color_mode) Sets the output color mode","title":"set_color_mode"},{"location":"DocstringGenerated/Renderer/#parameters_2","text":"Parameter Type Doc color_mode int Color code to apply during drawing","title":"Parameters"},{"location":"DocstringGenerated/Renderer/#unset_color_mode","text":"def unset_color_mode(self, color_mode) Unsets the output color mode","title":"unset_color_mode"},{"location":"DocstringGenerated/Renderer/#parameters_3","text":"Parameter Type Doc color_mode int Color code to unapply during drawing","title":"Parameters"},{"location":"DocstringGenerated/Renderer/#reset_cursor","text":"def reset_cursor(self, ui_element, fill=True) Positions the cursor at the bottom right of the selected element","title":"reset_cursor"},{"location":"DocstringGenerated/Renderer/#parameters_4","text":"Parameter Type Doc ui_element py_cui.ui.UIElement ui element for which to reset cursor fill bool a flag that tells the renderer if the element is filling its grid space, or not (ex. Textbox vs textblock)","title":"Parameters"},{"location":"DocstringGenerated/Renderer/#draw_cursor","text":"def draw_cursor(self, cursor_y, cursor_x) Draws the cursor at a particular location","title":"draw_cursor"},{"location":"DocstringGenerated/Renderer/#parameters_5","text":"Parameter Type Doc cursor_x, cursor_y int x, y coordinates where to draw the cursor","title":"Parameters"},{"location":"DocstringGenerated/Renderer/#draw_border","text":"def draw_border(self, ui_element, fill=True, with_title=True) Draws ascii border around ui element","title":"draw_border"},{"location":"DocstringGenerated/Renderer/#parameters_6","text":"Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn fill bool a flag that tells the renderer if the ui_element is filling its grid space, or not (ex. Textbox vs textblock) with_title bool flag that tells whether or not to draw ui_element title","title":"Parameters"},{"location":"DocstringGenerated/Renderer/#_draw_border_top","text":"def _draw_border_top(self, ui_element, y, with_title) Internal function for drawing top of border","title":"_draw_border_top"},{"location":"DocstringGenerated/Renderer/#parameters_7","text":"Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn y int the terminal row (top down) on which to draw the text with_title bool Flag that tells renderer if title should be superimposed into border.","title":"Parameters"},{"location":"DocstringGenerated/Renderer/#_draw_border_bottom","text":"def _draw_border_bottom(self, ui_element, y) Internal function for drawing bottom of border","title":"_draw_border_bottom"},{"location":"DocstringGenerated/Renderer/#parameters_8","text":"Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn y int the terminal row (top down) on which to draw the text","title":"Parameters"},{"location":"DocstringGenerated/Renderer/#_draw_blank_row","text":"def _draw_blank_row(self, ui_element, y) Internal function for drawing a blank row","title":"_draw_blank_row"},{"location":"DocstringGenerated/Renderer/#parameters_9","text":"Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn y int the terminal row (top down) on which to draw the text","title":"Parameters"},{"location":"DocstringGenerated/Renderer/#_get_render_text","text":"def _get_render_text(self, ui_element, line, centered, bordered, start_pos) Internal function that computes the scope of the text that should be drawn","title":"_get_render_text"},{"location":"DocstringGenerated/Renderer/#parameters_10","text":"Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn line str the line of text being drawn centered bool flag to set if the text should be centered bordered bool a flag to set if the text should be bordered start_pos int position to start rendering the text from.","title":"Parameters"},{"location":"DocstringGenerated/Renderer/#returns","text":"Return Variable Type Doc render_text str The text shortened to fit within given space","title":"Returns"},{"location":"DocstringGenerated/Renderer/#_generate_text_color_fragments","text":"def _generate_text_color_fragments(self, ui_element, line, render_text) Function that applies color rules to text, dividing them if match is found","title":"_generate_text_color_fragments"},{"location":"DocstringGenerated/Renderer/#parameters_11","text":"Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn line str the line of text being drawn render_text str The text shortened to fit within given space","title":"Parameters"},{"location":"DocstringGenerated/Renderer/#returns_1","text":"Return Variable Type Doc fragments list of [int, str] list of text - color code combinations to write","title":"Returns"},{"location":"DocstringGenerated/Renderer/#draw_text","text":"def draw_text(self, ui_element, line, y, centered = False, bordered = True, selected = False, start_pos = 0) Function that draws ui_element text.","title":"draw_text"},{"location":"DocstringGenerated/Renderer/#parameters_12","text":"Parameter Type Doc ui_element py_cui.ui.UIElement The ui_element being drawn line str the line of text being drawn y int the terminal row (top down) on which to draw the text centered bool flag to set if the text should be centered bordered bool a flag to set if the text should be bordered selected bool Flag that tells renderer if ui_element is selected. start_pos int position to start rendering the text from.","title":"Parameters"},{"location":"DocstringGenerated/Ui/","text":"ui Module containing classes for generic UI elements. Contains base UI element class, along with UI implementation agnostic UI element classes. Classes Class Doc UIElement Base class for all UI elements. Extended by base widget and popup classes. UIImplementation Base class for ui implementations. TextBoxImplementation(UIImplementation) UI implementation for a single-row textbox input MenuImplementation(UIImplementation) A scrollable menu UI element TextBlockImplementation(UIImplementation) Base class for TextBlockImplementation UIElement class UIElement Base class for all UI elements. Extended by base widget and popup classes. Interfaces between UIImplementation subclasses and CUI engine. For example, a widget is a subclass of a UIElement. Then a TextBox widget would be a subclass of the base widget class, and the TextBoxImplementation. The TextBoxImplementation superclass contains logic for all textbox required operations, while the widget base class contains all links to the CUI engine. Attributes Attribute Type Doc _id str Internal UI element unique ID _title str UI element title _padx, pady int, int padding in terminal characters _start_x, _start_y int, int Coords in terminal characters for top-left corner of element _stop_x, _stop_y int, int Coords in terminal characters for bottom-right corner of element _height, width int, int absolute dimensions of ui element in terminal characters _color int Default color for which to draw element _selected bool toggle for marking an element as selected _renderer py_cui.renderer.Renderer The default ui renderer _logger py_cui.debug.PyCUILogger The default logger inherited from the parent _help_text str Text to diplay when selected in status bar Methods Method Doc get_absolute_start_pos Must be implemented by subclass, computes the absolute coords of upper-left corner get_absolute_stop_pos Must be implemented by subclass, computes the absolute coords of bottom-right corner get_absolute_dimensions Gets dimensions of element in terminal characters update_height_width Function that refreshes position and dimensons on resize. get_viewport_height Gets the height of the element viewport (height minus padding and borders) get_id Gets the element ID get_title Getter for ui element title get_padding Gets ui element padding on in characters get_start_position Gets coords of upper left corner get_stop_position Gets coords of lower right corner get_color Gets current element color is_selected Get selected status get_renderer Gets reference to renderer object get_help_text Returns current help text set_title Function that sets the widget title. set_color Sets element default color set_selected Marks the UI element as selected or not selected set_help_text Sets status bar help text set_focus_text Sets status bar focus text. Legacy function, overridden by set_focus_text _handle_key_press Must be implemented by subclass. Used to handle keypresses _draw Must be implemented by subclasses. Uses renderer to draw element to terminal _assign_renderer Function that assigns a renderer object to the element init def __init__(self, id, title, renderer, logger) Initializer for UIElement base class get_absolute_start_pos def get_absolute_start_pos(self) Must be implemented by subclass, computes the absolute coords of upper-left corner get_absolute_stop_pos def get_absolute_stop_pos(self) Must be implemented by subclass, computes the absolute coords of bottom-right corner get_absolute_dimensions def get_absolute_dimensions(self) Gets dimensions of element in terminal characters Returns Return Variable Type Doc height, width int, int Dimensions of element in terminal characters update_height_width def update_height_width(self) Function that refreshes position and dimensons on resize. If necessary, make sure required widget attributes updated here as well. get_viewport_height def get_viewport_height(self) Gets the height of the element viewport (height minus padding and borders) Returns Return Variable Type Doc viewport_height int Height of element viewport in terminal characters get_id def get_id(self) Gets the element ID Returns Return Variable Type Doc id int The ui element id get_title def get_title(self) Getter for ui element title Returns Return Variable Type Doc title str UI element title get_padding def get_padding(self) Gets ui element padding on in characters Returns Return Variable Type Doc padx, pady int, int Padding on either axis in characters get_start_position def get_start_position(self) Gets coords of upper left corner Returns Return Variable Type Doc start_x, start_y int, int Coords of upper right corner get_stop_position def get_stop_position(self) Gets coords of lower right corner Returns Return Variable Type Doc stop_x, stop_y int, int Coords of lower right corner get_color def get_color(self) Gets current element color Returns Return Variable Type Doc color int color code for combination is_selected def is_selected(self) Get selected status Returns Return Variable Type Doc selected bool True if selected, False otherwise get_renderer def get_renderer(self) Gets reference to renderer object Returns Return Variable Type Doc renderer py_cui.renderer.Render renderer object used for drawing element get_help_text def get_help_text(self) Returns current help text Returns Return Variable Type Doc help_text str Current element status bar help message set_title def set_title(self, title) Function that sets the widget title. Parameters Parameter Type Doc title str New widget title set_color def set_color(self, color) Sets element default color Parameters Parameter Type Doc color int New color pair key code set_selected def set_selected(self, selected) Marks the UI element as selected or not selected Parameters Parameter Type Doc selected bool The new selected state of the element set_help_text def set_help_text(self, help_text) Sets status bar help text Parameters Parameter Type Doc help_text str New statusbar help text set_focus_text def set_focus_text(self, focus_text) Sets status bar focus text. Legacy function, overridden by set_focus_text Parameters Parameter Type Doc focus_text str New statusbar help text _handle_key_press def _handle_key_press(self, key_pressed) Must be implemented by subclass. Used to handle keypresses _draw def _draw(self) Must be implemented by subclasses. Uses renderer to draw element to terminal _assign_renderer def _assign_renderer(self, renderer) Function that assigns a renderer object to the element (Meant for internal usage only) Parameters Parameter Type Doc renderer py_cui.renderer.Renderer Renderer for drawing element Raises Error Type Doc error PyCUIError If parameter is not an initialized renderer. UIImplementation class UIImplementation Base class for ui implementations. Should be extended for creating logic common accross ui elements. For example, a textbox needs the same logic for a widget or popup. This base class is only used to initialize the logger Attributes Attribute Type Doc _logger py_cui.debug.PyCUILogger parent logger object reference. init def __init__(self, logger) TextBoxImplementation(UIImplementation) class TextBoxImplementation(UIImplementation) UI implementation for a single-row textbox input Attributes Attribute Type Doc _text str The text in the text box _initial_cursor int Initial position of the cursor _cursor_x, _cursor_y int The absolute positions of the cursor in the terminal window _cursor_text_pos int the cursor position relative to the text _cursor_max_left, cursor_max_right int The cursor bounds of the text box _viewport_width int The width of the textbox viewport _password bool Toggle to display password characters or text Methods Method Doc get_initial_cursor_pos Gets initial cursor position get_cursor_text_pos Gets current position of cursor relative to text get_cursor_limits Gets cursor extreme points in terminal position get_cursor_position Returns current cursor poition get_viewport_width Gets the width of the textbox viewport set_text Sets the value of the text. Overwrites existing text get Gets value of the text in the textbox clear Clears the text in the textbox _move_left Shifts the cursor the the left. Internal use only _move_right Shifts the cursor the the right. Internal use only _insert_char Inserts char at cursor position. Internal use only _jump_to_start Jumps to the start of the textbox. Internal use only _jump_to_end Jumps to the end to the textbox. Internal use only _erase_char Erases character at textbox cursor. Internal Use only _delete_char Deletes character to right of texbox cursor. Internal use only init def __init__(self, initial_text, password, logger) Initializer for the TextBoxImplementation base class get_initial_cursor_pos def get_initial_cursor_pos(self) Gets initial cursor position Returns Return Variable Type Doc initial_cursor int Initial position of the cursor get_cursor_text_pos def get_cursor_text_pos(self) Gets current position of cursor relative to text Returns Return Variable Type Doc cursor_text_pos int the cursor position relative to the text get_cursor_limits def get_cursor_limits(self) Gets cursor extreme points in terminal position Returns Return Variable Type Doc cursor_max_left, cursor_max_right int The cursor bounds of the text box get_cursor_position def get_cursor_position(self) Returns current cursor poition Returns Return Variable Type Doc cursor_x, cursor_y int The absolute positions of the cursor in the terminal window get_viewport_width def get_viewport_width(self) Gets the width of the textbox viewport Returns Return Variable Type Doc viewport_width int The width of the textbox viewport set_text def set_text(self, text) Sets the value of the text. Overwrites existing text Parameters Parameter Type Doc text str The text to write to the textbox get def get(self) Gets value of the text in the textbox Returns Return Variable Type Doc text str The current textbox test clear def clear(self) Clears the text in the textbox _move_left def _move_left(self) Shifts the cursor the the left. Internal use only _move_right def _move_right(self) Shifts the cursor the the right. Internal use only _insert_char def _insert_char(self, key_pressed) Inserts char at cursor position. Internal use only Parameters Parameter Type Doc key_pressed int key code of key pressed _jump_to_start def _jump_to_start(self) Jumps to the start of the textbox. Internal use only _jump_to_end def _jump_to_end(self) Jumps to the end to the textbox. Internal use only _erase_char def _erase_char(self) Erases character at textbox cursor. Internal Use only _delete_char def _delete_char(self) Deletes character to right of texbox cursor. Internal use only MenuImplementation(UIImplementation) class MenuImplementation(UIImplementation) A scrollable menu UI element Allows for creating a scrollable list of items of which one is selectable. Analogous to a RadioButton Attributes Attribute Type Doc _top_view int the uppermost menu element in view _selected_item int the currently highlighted menu item _view_items list of str list of menu items Methods Method Doc clear Clears all items from the Scroll Menu get_selected_item Gets the currently selected item set_selected_item Sets the currently selected item _scroll_up Function that scrolls the view up in the scroll menu _scroll_down Function that scrolls the view down in the scroll menu add_item Adds an item to the menu. add_item_list Adds a list of items to the scroll menu. remove_selected_item Function that removes the selected item from the scroll menu. get_item_list Function that gets list of items in a scroll menu get Function that gets the selected item from the scroll menu init def __init__(self, logger) Initializer for MenuImplementation base class clear def clear(self) Clears all items from the Scroll Menu get_selected_item def get_selected_item(self) Gets the currently selected item Returns Return Variable Type Doc selected_item int the currently highlighted menu item set_selected_item def set_selected_item(self, selected_item) Sets the currently selected item Parameters Parameter Type Doc selected_item int The new selected item index _scroll_up def _scroll_up(self) Function that scrolls the view up in the scroll menu _scroll_down def _scroll_down(self, viewport_height) Function that scrolls the view down in the scroll menu TODO: Viewport height should be calculated internally, and not rely on a parameter. Parameters Parameter Type Doc viewport_height int The number of visible viewport items add_item def add_item(self, item_text) Adds an item to the menu. Parameters Parameter Type Doc item_text str The text for the item add_item_list def add_item_list(self, item_list) Adds a list of items to the scroll menu. Parameters Parameter Type Doc item_list list of str list of strings to add as items to the scrollmenu remove_selected_item def remove_selected_item(self) Function that removes the selected item from the scroll menu. get_item_list def get_item_list(self) Function that gets list of items in a scroll menu Returns Return Variable Type Doc item_list list of str list of items in the scrollmenu get def get(self) Function that gets the selected item from the scroll menu Returns Return Variable Type Doc item str selected item, or None if there are no items in the menu TextBlockImplementation(UIImplementation) class TextBlockImplementation(UIImplementation) Base class for TextBlockImplementation Contains all logic required for a textblock ui element to function. Currently only implemented in widget form, though popup form is possible. Attributes Attribute Type Doc _text_lines List[str] the lines of text in the texbox _viewport_x_start, _viewport_y_start int Initial location of viewport relative to text _cursor_text_pos_x, _cursor_text_pos_y int Cursor position relative to text _cursor_x, _cursor_y int Absolute cursor position in characters _cursor_max_up, _cursor_max_down int cursor limits in vertical space _cursor_max_left, _cursor_max_right int Cursor limits in horizontal space _viewport_height, _viewport_width int The dimensions of the viewport in characters Methods Method Doc get_viewport_start_pos Gets upper left corner position of viewport get_viewport_dims Gets viewport dimensions in characters get_cursor_text_pos Gets cursor postion relative to text get_abs_cursor_position Gets absolute cursor position in terminal characters get_cursor_limits_vertical Gets limits for cursor in vertical direction get_cursor_limits_horizontal Gets limits for cursor in horizontal direction get Gets all of the text in the textblock and returns it write Function used for writing text to the text block clear Function that clears the text block get_current_line Returns the line on which the cursor currently resides set_text Function that sets the text for the textblock. set_text_line Function that sets the current line's text. _move_left Function that moves the cursor/text position one location to the left _move_right Function that moves the cursor/text position one location to the right _move_up Function that moves the cursor/text position one location up _move_down Function that moves the cursor/text position one location down _handle_newline Function that handles recieving newline characters in the text _handle_backspace Function that handles recieving backspace characters in the text _handle_home Function that handles recieving a home keypress _handle_end Function that handles recieving an end keypress _handle_delete Function that handles recieving a delete keypress _insert_char Function that handles recieving a character init def __init__(self, initial_text, logger) Initializer for TextBlockImplementation base class Zeros attributes, and parses initial text get_viewport_start_pos def get_viewport_start_pos(self) Gets upper left corner position of viewport Returns Return Variable Type Doc viewport_x_start, viewport_y_start int Initial location of viewport relative to text get_viewport_dims def get_viewport_dims(self) Gets viewport dimensions in characters Returns Return Variable Type Doc viewport_height, viewport_width int The dimensions of the viewport in characters get_cursor_text_pos def get_cursor_text_pos(self) Gets cursor postion relative to text Returns Return Variable Type Doc cursor_text_pos_x, cursor_text_pos_y int Cursor position relative to text get_abs_cursor_position def get_abs_cursor_position(self) Gets absolute cursor position in terminal characters Returns Return Variable Type Doc cursor_x, cursor_y int Absolute cursor position in characters get_cursor_limits_vertical def get_cursor_limits_vertical(self) Gets limits for cursor in vertical direction Returns Return Variable Type Doc cursor_max_up, cursor_max_down int cursor limits in vertical space get_cursor_limits_horizontal def get_cursor_limits_horizontal(self) Gets limits for cursor in horizontal direction Returns Return Variable Type Doc cursor_max_left, cursor_max_right int Cursor limits in horizontal space get def get(self) Gets all of the text in the textblock and returns it Returns Return Variable Type Doc text str The current text in the text block write def write(self, text) Function used for writing text to the text block Parameters Parameter Type Doc text str Text to write to the text block clear def clear(self) Function that clears the text block get_current_line def get_current_line(self) Returns the line on which the cursor currently resides Returns Return Variable Type Doc current_line str The current line of text that the cursor is on set_text def set_text(self, text) Function that sets the text for the textblock. Note that this will overwrite any existing text Parameters Parameter Type Doc text str text to write into text block set_text_line def set_text_line(self, text) Function that sets the current line's text. Meant only for internal use Parameters Parameter Type Doc text str text line to write into text block _move_left def _move_left(self) Function that moves the cursor/text position one location to the left _move_right def _move_right(self) Function that moves the cursor/text position one location to the right _move_up def _move_up(self) Function that moves the cursor/text position one location up _move_down def _move_down(self) Function that moves the cursor/text position one location down _handle_newline def _handle_newline(self) Function that handles recieving newline characters in the text _handle_backspace def _handle_backspace(self) Function that handles recieving backspace characters in the text _handle_home def _handle_home(self) Function that handles recieving a home keypress _handle_end def _handle_end(self) Function that handles recieving an end keypress _handle_delete def _handle_delete(self) Function that handles recieving a delete keypress _insert_char def _insert_char(self, key_pressed) Function that handles recieving a character Parameters Parameter Type Doc key_pressed int key code of key pressed","title":"UI"},{"location":"DocstringGenerated/Ui/#ui","text":"Module containing classes for generic UI elements. Contains base UI element class, along with UI implementation agnostic UI element classes.","title":"ui"},{"location":"DocstringGenerated/Ui/#classes","text":"Class Doc UIElement Base class for all UI elements. Extended by base widget and popup classes. UIImplementation Base class for ui implementations. TextBoxImplementation(UIImplementation) UI implementation for a single-row textbox input MenuImplementation(UIImplementation) A scrollable menu UI element TextBlockImplementation(UIImplementation) Base class for TextBlockImplementation","title":"Classes"},{"location":"DocstringGenerated/Ui/#uielement","text":"class UIElement Base class for all UI elements. Extended by base widget and popup classes. Interfaces between UIImplementation subclasses and CUI engine. For example, a widget is a subclass of a UIElement. Then a TextBox widget would be a subclass of the base widget class, and the TextBoxImplementation. The TextBoxImplementation superclass contains logic for all textbox required operations, while the widget base class contains all links to the CUI engine.","title":"UIElement"},{"location":"DocstringGenerated/Ui/#attributes","text":"Attribute Type Doc _id str Internal UI element unique ID _title str UI element title _padx, pady int, int padding in terminal characters _start_x, _start_y int, int Coords in terminal characters for top-left corner of element _stop_x, _stop_y int, int Coords in terminal characters for bottom-right corner of element _height, width int, int absolute dimensions of ui element in terminal characters _color int Default color for which to draw element _selected bool toggle for marking an element as selected _renderer py_cui.renderer.Renderer The default ui renderer _logger py_cui.debug.PyCUILogger The default logger inherited from the parent _help_text str Text to diplay when selected in status bar","title":"Attributes"},{"location":"DocstringGenerated/Ui/#methods","text":"Method Doc get_absolute_start_pos Must be implemented by subclass, computes the absolute coords of upper-left corner get_absolute_stop_pos Must be implemented by subclass, computes the absolute coords of bottom-right corner get_absolute_dimensions Gets dimensions of element in terminal characters update_height_width Function that refreshes position and dimensons on resize. get_viewport_height Gets the height of the element viewport (height minus padding and borders) get_id Gets the element ID get_title Getter for ui element title get_padding Gets ui element padding on in characters get_start_position Gets coords of upper left corner get_stop_position Gets coords of lower right corner get_color Gets current element color is_selected Get selected status get_renderer Gets reference to renderer object get_help_text Returns current help text set_title Function that sets the widget title. set_color Sets element default color set_selected Marks the UI element as selected or not selected set_help_text Sets status bar help text set_focus_text Sets status bar focus text. Legacy function, overridden by set_focus_text _handle_key_press Must be implemented by subclass. Used to handle keypresses _draw Must be implemented by subclasses. Uses renderer to draw element to terminal _assign_renderer Function that assigns a renderer object to the element","title":"Methods"},{"location":"DocstringGenerated/Ui/#init","text":"def __init__(self, id, title, renderer, logger) Initializer for UIElement base class","title":"init"},{"location":"DocstringGenerated/Ui/#get_absolute_start_pos","text":"def get_absolute_start_pos(self) Must be implemented by subclass, computes the absolute coords of upper-left corner","title":"get_absolute_start_pos"},{"location":"DocstringGenerated/Ui/#get_absolute_stop_pos","text":"def get_absolute_stop_pos(self) Must be implemented by subclass, computes the absolute coords of bottom-right corner","title":"get_absolute_stop_pos"},{"location":"DocstringGenerated/Ui/#get_absolute_dimensions","text":"def get_absolute_dimensions(self) Gets dimensions of element in terminal characters","title":"get_absolute_dimensions"},{"location":"DocstringGenerated/Ui/#returns","text":"Return Variable Type Doc height, width int, int Dimensions of element in terminal characters","title":"Returns"},{"location":"DocstringGenerated/Ui/#update_height_width","text":"def update_height_width(self) Function that refreshes position and dimensons on resize. If necessary, make sure required widget attributes updated here as well.","title":"update_height_width"},{"location":"DocstringGenerated/Ui/#get_viewport_height","text":"def get_viewport_height(self) Gets the height of the element viewport (height minus padding and borders)","title":"get_viewport_height"},{"location":"DocstringGenerated/Ui/#returns_1","text":"Return Variable Type Doc viewport_height int Height of element viewport in terminal characters","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_id","text":"def get_id(self) Gets the element ID","title":"get_id"},{"location":"DocstringGenerated/Ui/#returns_2","text":"Return Variable Type Doc id int The ui element id","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_title","text":"def get_title(self) Getter for ui element title","title":"get_title"},{"location":"DocstringGenerated/Ui/#returns_3","text":"Return Variable Type Doc title str UI element title","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_padding","text":"def get_padding(self) Gets ui element padding on in characters","title":"get_padding"},{"location":"DocstringGenerated/Ui/#returns_4","text":"Return Variable Type Doc padx, pady int, int Padding on either axis in characters","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_start_position","text":"def get_start_position(self) Gets coords of upper left corner","title":"get_start_position"},{"location":"DocstringGenerated/Ui/#returns_5","text":"Return Variable Type Doc start_x, start_y int, int Coords of upper right corner","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_stop_position","text":"def get_stop_position(self) Gets coords of lower right corner","title":"get_stop_position"},{"location":"DocstringGenerated/Ui/#returns_6","text":"Return Variable Type Doc stop_x, stop_y int, int Coords of lower right corner","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_color","text":"def get_color(self) Gets current element color","title":"get_color"},{"location":"DocstringGenerated/Ui/#returns_7","text":"Return Variable Type Doc color int color code for combination","title":"Returns"},{"location":"DocstringGenerated/Ui/#is_selected","text":"def is_selected(self) Get selected status","title":"is_selected"},{"location":"DocstringGenerated/Ui/#returns_8","text":"Return Variable Type Doc selected bool True if selected, False otherwise","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_renderer","text":"def get_renderer(self) Gets reference to renderer object","title":"get_renderer"},{"location":"DocstringGenerated/Ui/#returns_9","text":"Return Variable Type Doc renderer py_cui.renderer.Render renderer object used for drawing element","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_help_text","text":"def get_help_text(self) Returns current help text","title":"get_help_text"},{"location":"DocstringGenerated/Ui/#returns_10","text":"Return Variable Type Doc help_text str Current element status bar help message","title":"Returns"},{"location":"DocstringGenerated/Ui/#set_title","text":"def set_title(self, title) Function that sets the widget title.","title":"set_title"},{"location":"DocstringGenerated/Ui/#parameters","text":"Parameter Type Doc title str New widget title","title":"Parameters"},{"location":"DocstringGenerated/Ui/#set_color","text":"def set_color(self, color) Sets element default color","title":"set_color"},{"location":"DocstringGenerated/Ui/#parameters_1","text":"Parameter Type Doc color int New color pair key code","title":"Parameters"},{"location":"DocstringGenerated/Ui/#set_selected","text":"def set_selected(self, selected) Marks the UI element as selected or not selected","title":"set_selected"},{"location":"DocstringGenerated/Ui/#parameters_2","text":"Parameter Type Doc selected bool The new selected state of the element","title":"Parameters"},{"location":"DocstringGenerated/Ui/#set_help_text","text":"def set_help_text(self, help_text) Sets status bar help text","title":"set_help_text"},{"location":"DocstringGenerated/Ui/#parameters_3","text":"Parameter Type Doc help_text str New statusbar help text","title":"Parameters"},{"location":"DocstringGenerated/Ui/#set_focus_text","text":"def set_focus_text(self, focus_text) Sets status bar focus text. Legacy function, overridden by set_focus_text","title":"set_focus_text"},{"location":"DocstringGenerated/Ui/#parameters_4","text":"Parameter Type Doc focus_text str New statusbar help text","title":"Parameters"},{"location":"DocstringGenerated/Ui/#_handle_key_press","text":"def _handle_key_press(self, key_pressed) Must be implemented by subclass. Used to handle keypresses","title":"_handle_key_press"},{"location":"DocstringGenerated/Ui/#_draw","text":"def _draw(self) Must be implemented by subclasses. Uses renderer to draw element to terminal","title":"_draw"},{"location":"DocstringGenerated/Ui/#_assign_renderer","text":"def _assign_renderer(self, renderer) Function that assigns a renderer object to the element (Meant for internal usage only)","title":"_assign_renderer"},{"location":"DocstringGenerated/Ui/#parameters_5","text":"Parameter Type Doc renderer py_cui.renderer.Renderer Renderer for drawing element","title":"Parameters"},{"location":"DocstringGenerated/Ui/#raises","text":"Error Type Doc error PyCUIError If parameter is not an initialized renderer.","title":"Raises"},{"location":"DocstringGenerated/Ui/#uiimplementation","text":"class UIImplementation Base class for ui implementations. Should be extended for creating logic common accross ui elements. For example, a textbox needs the same logic for a widget or popup. This base class is only used to initialize the logger","title":"UIImplementation"},{"location":"DocstringGenerated/Ui/#attributes_1","text":"Attribute Type Doc _logger py_cui.debug.PyCUILogger parent logger object reference.","title":"Attributes"},{"location":"DocstringGenerated/Ui/#init_1","text":"def __init__(self, logger)","title":"init"},{"location":"DocstringGenerated/Ui/#textboximplementationuiimplementation","text":"class TextBoxImplementation(UIImplementation) UI implementation for a single-row textbox input","title":"TextBoxImplementation(UIImplementation)"},{"location":"DocstringGenerated/Ui/#attributes_2","text":"Attribute Type Doc _text str The text in the text box _initial_cursor int Initial position of the cursor _cursor_x, _cursor_y int The absolute positions of the cursor in the terminal window _cursor_text_pos int the cursor position relative to the text _cursor_max_left, cursor_max_right int The cursor bounds of the text box _viewport_width int The width of the textbox viewport _password bool Toggle to display password characters or text","title":"Attributes"},{"location":"DocstringGenerated/Ui/#methods_1","text":"Method Doc get_initial_cursor_pos Gets initial cursor position get_cursor_text_pos Gets current position of cursor relative to text get_cursor_limits Gets cursor extreme points in terminal position get_cursor_position Returns current cursor poition get_viewport_width Gets the width of the textbox viewport set_text Sets the value of the text. Overwrites existing text get Gets value of the text in the textbox clear Clears the text in the textbox _move_left Shifts the cursor the the left. Internal use only _move_right Shifts the cursor the the right. Internal use only _insert_char Inserts char at cursor position. Internal use only _jump_to_start Jumps to the start of the textbox. Internal use only _jump_to_end Jumps to the end to the textbox. Internal use only _erase_char Erases character at textbox cursor. Internal Use only _delete_char Deletes character to right of texbox cursor. Internal use only","title":"Methods"},{"location":"DocstringGenerated/Ui/#init_2","text":"def __init__(self, initial_text, password, logger) Initializer for the TextBoxImplementation base class","title":"init"},{"location":"DocstringGenerated/Ui/#get_initial_cursor_pos","text":"def get_initial_cursor_pos(self) Gets initial cursor position","title":"get_initial_cursor_pos"},{"location":"DocstringGenerated/Ui/#returns_11","text":"Return Variable Type Doc initial_cursor int Initial position of the cursor","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_cursor_text_pos","text":"def get_cursor_text_pos(self) Gets current position of cursor relative to text","title":"get_cursor_text_pos"},{"location":"DocstringGenerated/Ui/#returns_12","text":"Return Variable Type Doc cursor_text_pos int the cursor position relative to the text","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_cursor_limits","text":"def get_cursor_limits(self) Gets cursor extreme points in terminal position","title":"get_cursor_limits"},{"location":"DocstringGenerated/Ui/#returns_13","text":"Return Variable Type Doc cursor_max_left, cursor_max_right int The cursor bounds of the text box","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_cursor_position","text":"def get_cursor_position(self) Returns current cursor poition","title":"get_cursor_position"},{"location":"DocstringGenerated/Ui/#returns_14","text":"Return Variable Type Doc cursor_x, cursor_y int The absolute positions of the cursor in the terminal window","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_viewport_width","text":"def get_viewport_width(self) Gets the width of the textbox viewport","title":"get_viewport_width"},{"location":"DocstringGenerated/Ui/#returns_15","text":"Return Variable Type Doc viewport_width int The width of the textbox viewport","title":"Returns"},{"location":"DocstringGenerated/Ui/#set_text","text":"def set_text(self, text) Sets the value of the text. Overwrites existing text","title":"set_text"},{"location":"DocstringGenerated/Ui/#parameters_6","text":"Parameter Type Doc text str The text to write to the textbox","title":"Parameters"},{"location":"DocstringGenerated/Ui/#get","text":"def get(self) Gets value of the text in the textbox","title":"get"},{"location":"DocstringGenerated/Ui/#returns_16","text":"Return Variable Type Doc text str The current textbox test","title":"Returns"},{"location":"DocstringGenerated/Ui/#clear","text":"def clear(self) Clears the text in the textbox","title":"clear"},{"location":"DocstringGenerated/Ui/#_move_left","text":"def _move_left(self) Shifts the cursor the the left. Internal use only","title":"_move_left"},{"location":"DocstringGenerated/Ui/#_move_right","text":"def _move_right(self) Shifts the cursor the the right. Internal use only","title":"_move_right"},{"location":"DocstringGenerated/Ui/#_insert_char","text":"def _insert_char(self, key_pressed) Inserts char at cursor position. Internal use only","title":"_insert_char"},{"location":"DocstringGenerated/Ui/#parameters_7","text":"Parameter Type Doc key_pressed int key code of key pressed","title":"Parameters"},{"location":"DocstringGenerated/Ui/#_jump_to_start","text":"def _jump_to_start(self) Jumps to the start of the textbox. Internal use only","title":"_jump_to_start"},{"location":"DocstringGenerated/Ui/#_jump_to_end","text":"def _jump_to_end(self) Jumps to the end to the textbox. Internal use only","title":"_jump_to_end"},{"location":"DocstringGenerated/Ui/#_erase_char","text":"def _erase_char(self) Erases character at textbox cursor. Internal Use only","title":"_erase_char"},{"location":"DocstringGenerated/Ui/#_delete_char","text":"def _delete_char(self) Deletes character to right of texbox cursor. Internal use only","title":"_delete_char"},{"location":"DocstringGenerated/Ui/#menuimplementationuiimplementation","text":"class MenuImplementation(UIImplementation) A scrollable menu UI element Allows for creating a scrollable list of items of which one is selectable. Analogous to a RadioButton","title":"MenuImplementation(UIImplementation)"},{"location":"DocstringGenerated/Ui/#attributes_3","text":"Attribute Type Doc _top_view int the uppermost menu element in view _selected_item int the currently highlighted menu item _view_items list of str list of menu items","title":"Attributes"},{"location":"DocstringGenerated/Ui/#methods_2","text":"Method Doc clear Clears all items from the Scroll Menu get_selected_item Gets the currently selected item set_selected_item Sets the currently selected item _scroll_up Function that scrolls the view up in the scroll menu _scroll_down Function that scrolls the view down in the scroll menu add_item Adds an item to the menu. add_item_list Adds a list of items to the scroll menu. remove_selected_item Function that removes the selected item from the scroll menu. get_item_list Function that gets list of items in a scroll menu get Function that gets the selected item from the scroll menu","title":"Methods"},{"location":"DocstringGenerated/Ui/#init_3","text":"def __init__(self, logger) Initializer for MenuImplementation base class","title":"init"},{"location":"DocstringGenerated/Ui/#clear_1","text":"def clear(self) Clears all items from the Scroll Menu","title":"clear"},{"location":"DocstringGenerated/Ui/#get_selected_item","text":"def get_selected_item(self) Gets the currently selected item","title":"get_selected_item"},{"location":"DocstringGenerated/Ui/#returns_17","text":"Return Variable Type Doc selected_item int the currently highlighted menu item","title":"Returns"},{"location":"DocstringGenerated/Ui/#set_selected_item","text":"def set_selected_item(self, selected_item) Sets the currently selected item","title":"set_selected_item"},{"location":"DocstringGenerated/Ui/#parameters_8","text":"Parameter Type Doc selected_item int The new selected item index","title":"Parameters"},{"location":"DocstringGenerated/Ui/#_scroll_up","text":"def _scroll_up(self) Function that scrolls the view up in the scroll menu","title":"_scroll_up"},{"location":"DocstringGenerated/Ui/#_scroll_down","text":"def _scroll_down(self, viewport_height) Function that scrolls the view down in the scroll menu TODO: Viewport height should be calculated internally, and not rely on a parameter.","title":"_scroll_down"},{"location":"DocstringGenerated/Ui/#parameters_9","text":"Parameter Type Doc viewport_height int The number of visible viewport items","title":"Parameters"},{"location":"DocstringGenerated/Ui/#add_item","text":"def add_item(self, item_text) Adds an item to the menu.","title":"add_item"},{"location":"DocstringGenerated/Ui/#parameters_10","text":"Parameter Type Doc item_text str The text for the item","title":"Parameters"},{"location":"DocstringGenerated/Ui/#add_item_list","text":"def add_item_list(self, item_list) Adds a list of items to the scroll menu.","title":"add_item_list"},{"location":"DocstringGenerated/Ui/#parameters_11","text":"Parameter Type Doc item_list list of str list of strings to add as items to the scrollmenu","title":"Parameters"},{"location":"DocstringGenerated/Ui/#remove_selected_item","text":"def remove_selected_item(self) Function that removes the selected item from the scroll menu.","title":"remove_selected_item"},{"location":"DocstringGenerated/Ui/#get_item_list","text":"def get_item_list(self) Function that gets list of items in a scroll menu","title":"get_item_list"},{"location":"DocstringGenerated/Ui/#returns_18","text":"Return Variable Type Doc item_list list of str list of items in the scrollmenu","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_1","text":"def get(self) Function that gets the selected item from the scroll menu","title":"get"},{"location":"DocstringGenerated/Ui/#returns_19","text":"Return Variable Type Doc item str selected item, or None if there are no items in the menu","title":"Returns"},{"location":"DocstringGenerated/Ui/#textblockimplementationuiimplementation","text":"class TextBlockImplementation(UIImplementation) Base class for TextBlockImplementation Contains all logic required for a textblock ui element to function. Currently only implemented in widget form, though popup form is possible.","title":"TextBlockImplementation(UIImplementation)"},{"location":"DocstringGenerated/Ui/#attributes_4","text":"Attribute Type Doc _text_lines List[str] the lines of text in the texbox _viewport_x_start, _viewport_y_start int Initial location of viewport relative to text _cursor_text_pos_x, _cursor_text_pos_y int Cursor position relative to text _cursor_x, _cursor_y int Absolute cursor position in characters _cursor_max_up, _cursor_max_down int cursor limits in vertical space _cursor_max_left, _cursor_max_right int Cursor limits in horizontal space _viewport_height, _viewport_width int The dimensions of the viewport in characters","title":"Attributes"},{"location":"DocstringGenerated/Ui/#methods_3","text":"Method Doc get_viewport_start_pos Gets upper left corner position of viewport get_viewport_dims Gets viewport dimensions in characters get_cursor_text_pos Gets cursor postion relative to text get_abs_cursor_position Gets absolute cursor position in terminal characters get_cursor_limits_vertical Gets limits for cursor in vertical direction get_cursor_limits_horizontal Gets limits for cursor in horizontal direction get Gets all of the text in the textblock and returns it write Function used for writing text to the text block clear Function that clears the text block get_current_line Returns the line on which the cursor currently resides set_text Function that sets the text for the textblock. set_text_line Function that sets the current line's text. _move_left Function that moves the cursor/text position one location to the left _move_right Function that moves the cursor/text position one location to the right _move_up Function that moves the cursor/text position one location up _move_down Function that moves the cursor/text position one location down _handle_newline Function that handles recieving newline characters in the text _handle_backspace Function that handles recieving backspace characters in the text _handle_home Function that handles recieving a home keypress _handle_end Function that handles recieving an end keypress _handle_delete Function that handles recieving a delete keypress _insert_char Function that handles recieving a character","title":"Methods"},{"location":"DocstringGenerated/Ui/#init_4","text":"def __init__(self, initial_text, logger) Initializer for TextBlockImplementation base class Zeros attributes, and parses initial text","title":"init"},{"location":"DocstringGenerated/Ui/#get_viewport_start_pos","text":"def get_viewport_start_pos(self) Gets upper left corner position of viewport","title":"get_viewport_start_pos"},{"location":"DocstringGenerated/Ui/#returns_20","text":"Return Variable Type Doc viewport_x_start, viewport_y_start int Initial location of viewport relative to text","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_viewport_dims","text":"def get_viewport_dims(self) Gets viewport dimensions in characters","title":"get_viewport_dims"},{"location":"DocstringGenerated/Ui/#returns_21","text":"Return Variable Type Doc viewport_height, viewport_width int The dimensions of the viewport in characters","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_cursor_text_pos_1","text":"def get_cursor_text_pos(self) Gets cursor postion relative to text","title":"get_cursor_text_pos"},{"location":"DocstringGenerated/Ui/#returns_22","text":"Return Variable Type Doc cursor_text_pos_x, cursor_text_pos_y int Cursor position relative to text","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_abs_cursor_position","text":"def get_abs_cursor_position(self) Gets absolute cursor position in terminal characters","title":"get_abs_cursor_position"},{"location":"DocstringGenerated/Ui/#returns_23","text":"Return Variable Type Doc cursor_x, cursor_y int Absolute cursor position in characters","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_cursor_limits_vertical","text":"def get_cursor_limits_vertical(self) Gets limits for cursor in vertical direction","title":"get_cursor_limits_vertical"},{"location":"DocstringGenerated/Ui/#returns_24","text":"Return Variable Type Doc cursor_max_up, cursor_max_down int cursor limits in vertical space","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_cursor_limits_horizontal","text":"def get_cursor_limits_horizontal(self) Gets limits for cursor in horizontal direction","title":"get_cursor_limits_horizontal"},{"location":"DocstringGenerated/Ui/#returns_25","text":"Return Variable Type Doc cursor_max_left, cursor_max_right int Cursor limits in horizontal space","title":"Returns"},{"location":"DocstringGenerated/Ui/#get_2","text":"def get(self) Gets all of the text in the textblock and returns it","title":"get"},{"location":"DocstringGenerated/Ui/#returns_26","text":"Return Variable Type Doc text str The current text in the text block","title":"Returns"},{"location":"DocstringGenerated/Ui/#write","text":"def write(self, text) Function used for writing text to the text block","title":"write"},{"location":"DocstringGenerated/Ui/#parameters_12","text":"Parameter Type Doc text str Text to write to the text block","title":"Parameters"},{"location":"DocstringGenerated/Ui/#clear_2","text":"def clear(self) Function that clears the text block","title":"clear"},{"location":"DocstringGenerated/Ui/#get_current_line","text":"def get_current_line(self) Returns the line on which the cursor currently resides","title":"get_current_line"},{"location":"DocstringGenerated/Ui/#returns_27","text":"Return Variable Type Doc current_line str The current line of text that the cursor is on","title":"Returns"},{"location":"DocstringGenerated/Ui/#set_text_1","text":"def set_text(self, text) Function that sets the text for the textblock. Note that this will overwrite any existing text","title":"set_text"},{"location":"DocstringGenerated/Ui/#parameters_13","text":"Parameter Type Doc text str text to write into text block","title":"Parameters"},{"location":"DocstringGenerated/Ui/#set_text_line","text":"def set_text_line(self, text) Function that sets the current line's text. Meant only for internal use","title":"set_text_line"},{"location":"DocstringGenerated/Ui/#parameters_14","text":"Parameter Type Doc text str text line to write into text block","title":"Parameters"},{"location":"DocstringGenerated/Ui/#_move_left_1","text":"def _move_left(self) Function that moves the cursor/text position one location to the left","title":"_move_left"},{"location":"DocstringGenerated/Ui/#_move_right_1","text":"def _move_right(self) Function that moves the cursor/text position one location to the right","title":"_move_right"},{"location":"DocstringGenerated/Ui/#_move_up","text":"def _move_up(self) Function that moves the cursor/text position one location up","title":"_move_up"},{"location":"DocstringGenerated/Ui/#_move_down","text":"def _move_down(self) Function that moves the cursor/text position one location down","title":"_move_down"},{"location":"DocstringGenerated/Ui/#_handle_newline","text":"def _handle_newline(self) Function that handles recieving newline characters in the text","title":"_handle_newline"},{"location":"DocstringGenerated/Ui/#_handle_backspace","text":"def _handle_backspace(self) Function that handles recieving backspace characters in the text","title":"_handle_backspace"},{"location":"DocstringGenerated/Ui/#_handle_home","text":"def _handle_home(self) Function that handles recieving a home keypress","title":"_handle_home"},{"location":"DocstringGenerated/Ui/#_handle_end","text":"def _handle_end(self) Function that handles recieving an end keypress","title":"_handle_end"},{"location":"DocstringGenerated/Ui/#_handle_delete","text":"def _handle_delete(self) Function that handles recieving a delete keypress","title":"_handle_delete"},{"location":"DocstringGenerated/Ui/#_insert_char_1","text":"def _insert_char(self, key_pressed) Function that handles recieving a character","title":"_insert_char"},{"location":"DocstringGenerated/Ui/#parameters_15","text":"Parameter Type Doc key_pressed int key code of key pressed","title":"Parameters"},{"location":"DocstringGenerated/WidgetSet/","text":"widget_set File containing class that abstracts a collection of widgets. It can be used to swap between collections of widgets (screens) in a py_cui @author: Jakub Wlodek @created: 05-Oct-2019 Classes Class Doc WidgetSet Class that represents a collection of widgets. WidgetSet class WidgetSet Class that represents a collection of widgets. Use PyCUI.apply_widget_set() to set a given widget set for display Attributes Attribute Type Doc grid py_cui.grid.Grid The main layout manager for the CUI widgets dict of str - py_cui.widgets.Widget dict of widget in the grid keybindings list of py_cui.keybinding.KeyBinding list of keybindings to check against in the main CUI loop height, width int height of the terminal in characters, width of terminal in characters Methods Method Doc set_selected_widget Function that sets the selected cell for the CUI get_widgets Function that gets current set of widgets add_key_command Function that adds a keybinding to the CUI when in overview mode add_scroll_menu Function that adds a new scroll menu to the CUI grid add_checkbox_menu Function that adds a new checkbox menu to the CUI grid add_text_box Function that adds a new text box to the CUI grid add_text_block Function that adds a new text block to the CUI grid add_label Function that adds a new label to the CUI grid add_block_label Function that adds a new block label to the CUI grid add_button Function that adds a new button to the CUI grid init def __init__(self, num_rows, num_cols, logger, simulated_terminal=None) Constructor for WidgetSet set_selected_widget def set_selected_widget(self, widget_id) Function that sets the selected cell for the CUI Parameters Parameter Type Doc cell_title str the title of the cell get_widgets def get_widgets(self) Function that gets current set of widgets Returns Return Variable Type Doc widgets dict of str -> widget dictionary mapping widget IDs to object instances add_key_command def add_key_command(self, key, command) Function that adds a keybinding to the CUI when in overview mode Parameters Parameter Type Doc key py_cui.keys.KEY_* The key bound to the command command Function A no-arg or lambda function to fire on keypress add_scroll_menu def add_scroll_menu(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) Function that adds a new scroll menu to the CUI grid Parameters Parameter Type Doc title str The title of the scroll menu row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction Returns Return Variable Type Doc new_scroll_menu ScrollMenu A reference to the created scroll menu object. add_checkbox_menu def add_checkbox_menu(self, title, row, column, row_span=1, column_span=1, padx=1, pady=0, checked_char='X') Function that adds a new checkbox menu to the CUI grid Parameters Parameter Type Doc title str The title of the checkbox row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction checked_char='X' char The character used to mark 'Checked' items Returns Return Variable Type Doc new_checkbox_menu CheckBoxMenu A reference to the created checkbox object. add_text_box def add_text_box(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, initial_text = '', password = False) Function that adds a new text box to the CUI grid Parameters Parameter Type Doc title str The title of the textbox row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction initial_text='' str Initial text for the textbox password=False bool Toggle to show '*' instead of characters. Returns Return Variable Type Doc new_text_box TextBox A reference to the created textbox object. add_text_block def add_text_block(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, initial_text = '') Function that adds a new text block to the CUI grid Parameters Parameter Type Doc title str The title of the text block row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction initial_text='' str Initial text for the text block Returns Return Variable Type Doc new_text_block ScrollTextBlock A reference to the created textblock object. add_label def add_label(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) Function that adds a new label to the CUI grid Parameters Parameter Type Doc title str The title of the label row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction Returns Return Variable Type Doc new_label Label A reference to the created label object. add_block_label def add_block_label(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, center=True) Function that adds a new block label to the CUI grid Parameters Parameter Type Doc title str The title of the block label row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction center bool flag to tell label to be centered or left-aligned. Returns Return Variable Type Doc new_label BlockLabel A reference to the created block label object. add_button def add_button(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, command=None) Function that adds a new button to the CUI grid Parameters Parameter Type Doc title str The title of the button row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction command=None Function A no-argument or lambda function to fire on button press. Returns Return Variable Type Doc new_button Button A reference to the created button object.","title":"Widget Sets"},{"location":"DocstringGenerated/WidgetSet/#widget_set","text":"File containing class that abstracts a collection of widgets. It can be used to swap between collections of widgets (screens) in a py_cui @author: Jakub Wlodek @created: 05-Oct-2019","title":"widget_set"},{"location":"DocstringGenerated/WidgetSet/#classes","text":"Class Doc WidgetSet Class that represents a collection of widgets.","title":"Classes"},{"location":"DocstringGenerated/WidgetSet/#widgetset","text":"class WidgetSet Class that represents a collection of widgets. Use PyCUI.apply_widget_set() to set a given widget set for display","title":"WidgetSet"},{"location":"DocstringGenerated/WidgetSet/#attributes","text":"Attribute Type Doc grid py_cui.grid.Grid The main layout manager for the CUI widgets dict of str - py_cui.widgets.Widget dict of widget in the grid keybindings list of py_cui.keybinding.KeyBinding list of keybindings to check against in the main CUI loop height, width int height of the terminal in characters, width of terminal in characters","title":"Attributes"},{"location":"DocstringGenerated/WidgetSet/#methods","text":"Method Doc set_selected_widget Function that sets the selected cell for the CUI get_widgets Function that gets current set of widgets add_key_command Function that adds a keybinding to the CUI when in overview mode add_scroll_menu Function that adds a new scroll menu to the CUI grid add_checkbox_menu Function that adds a new checkbox menu to the CUI grid add_text_box Function that adds a new text box to the CUI grid add_text_block Function that adds a new text block to the CUI grid add_label Function that adds a new label to the CUI grid add_block_label Function that adds a new block label to the CUI grid add_button Function that adds a new button to the CUI grid","title":"Methods"},{"location":"DocstringGenerated/WidgetSet/#init","text":"def __init__(self, num_rows, num_cols, logger, simulated_terminal=None) Constructor for WidgetSet","title":"init"},{"location":"DocstringGenerated/WidgetSet/#set_selected_widget","text":"def set_selected_widget(self, widget_id) Function that sets the selected cell for the CUI","title":"set_selected_widget"},{"location":"DocstringGenerated/WidgetSet/#parameters","text":"Parameter Type Doc cell_title str the title of the cell","title":"Parameters"},{"location":"DocstringGenerated/WidgetSet/#get_widgets","text":"def get_widgets(self) Function that gets current set of widgets","title":"get_widgets"},{"location":"DocstringGenerated/WidgetSet/#returns","text":"Return Variable Type Doc widgets dict of str -> widget dictionary mapping widget IDs to object instances","title":"Returns"},{"location":"DocstringGenerated/WidgetSet/#add_key_command","text":"def add_key_command(self, key, command) Function that adds a keybinding to the CUI when in overview mode","title":"add_key_command"},{"location":"DocstringGenerated/WidgetSet/#parameters_1","text":"Parameter Type Doc key py_cui.keys.KEY_* The key bound to the command command Function A no-arg or lambda function to fire on keypress","title":"Parameters"},{"location":"DocstringGenerated/WidgetSet/#add_scroll_menu","text":"def add_scroll_menu(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) Function that adds a new scroll menu to the CUI grid","title":"add_scroll_menu"},{"location":"DocstringGenerated/WidgetSet/#parameters_2","text":"Parameter Type Doc title str The title of the scroll menu row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction","title":"Parameters"},{"location":"DocstringGenerated/WidgetSet/#returns_1","text":"Return Variable Type Doc new_scroll_menu ScrollMenu A reference to the created scroll menu object.","title":"Returns"},{"location":"DocstringGenerated/WidgetSet/#add_checkbox_menu","text":"def add_checkbox_menu(self, title, row, column, row_span=1, column_span=1, padx=1, pady=0, checked_char='X') Function that adds a new checkbox menu to the CUI grid","title":"add_checkbox_menu"},{"location":"DocstringGenerated/WidgetSet/#parameters_3","text":"Parameter Type Doc title str The title of the checkbox row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction checked_char='X' char The character used to mark 'Checked' items","title":"Parameters"},{"location":"DocstringGenerated/WidgetSet/#returns_2","text":"Return Variable Type Doc new_checkbox_menu CheckBoxMenu A reference to the created checkbox object.","title":"Returns"},{"location":"DocstringGenerated/WidgetSet/#add_text_box","text":"def add_text_box(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, initial_text = '', password = False) Function that adds a new text box to the CUI grid","title":"add_text_box"},{"location":"DocstringGenerated/WidgetSet/#parameters_4","text":"Parameter Type Doc title str The title of the textbox row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction initial_text='' str Initial text for the textbox password=False bool Toggle to show '*' instead of characters.","title":"Parameters"},{"location":"DocstringGenerated/WidgetSet/#returns_3","text":"Return Variable Type Doc new_text_box TextBox A reference to the created textbox object.","title":"Returns"},{"location":"DocstringGenerated/WidgetSet/#add_text_block","text":"def add_text_block(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, initial_text = '') Function that adds a new text block to the CUI grid","title":"add_text_block"},{"location":"DocstringGenerated/WidgetSet/#parameters_5","text":"Parameter Type Doc title str The title of the text block row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction initial_text='' str Initial text for the text block","title":"Parameters"},{"location":"DocstringGenerated/WidgetSet/#returns_4","text":"Return Variable Type Doc new_text_block ScrollTextBlock A reference to the created textblock object.","title":"Returns"},{"location":"DocstringGenerated/WidgetSet/#add_label","text":"def add_label(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0) Function that adds a new label to the CUI grid","title":"add_label"},{"location":"DocstringGenerated/WidgetSet/#parameters_6","text":"Parameter Type Doc title str The title of the label row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction","title":"Parameters"},{"location":"DocstringGenerated/WidgetSet/#returns_5","text":"Return Variable Type Doc new_label Label A reference to the created label object.","title":"Returns"},{"location":"DocstringGenerated/WidgetSet/#add_block_label","text":"def add_block_label(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, center=True) Function that adds a new block label to the CUI grid","title":"add_block_label"},{"location":"DocstringGenerated/WidgetSet/#parameters_7","text":"Parameter Type Doc title str The title of the block label row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction center bool flag to tell label to be centered or left-aligned.","title":"Parameters"},{"location":"DocstringGenerated/WidgetSet/#returns_6","text":"Return Variable Type Doc new_label BlockLabel A reference to the created block label object.","title":"Returns"},{"location":"DocstringGenerated/WidgetSet/#add_button","text":"def add_button(self, title, row, column, row_span = 1, column_span = 1, padx = 1, pady = 0, command=None) Function that adds a new button to the CUI grid","title":"add_button"},{"location":"DocstringGenerated/WidgetSet/#parameters_8","text":"Parameter Type Doc title str The title of the button row int The row value, from the top down column int The column value from the top down row_span=1 int The number of rows to span accross column_span=1 int the number of columns to span accross padx=1 int number of padding characters in the x direction pady=0 int number of padding characters in the y direction command=None Function A no-argument or lambda function to fire on button press.","title":"Parameters"},{"location":"DocstringGenerated/WidgetSet/#returns_7","text":"Return Variable Type Doc new_button Button A reference to the created button object.","title":"Returns"},{"location":"DocstringGenerated/Widgets/","text":"widgets File contatining all core widget classes for py_cui. Widgets are the basic building blocks of a user interface made with py_cui. This file contains classes for: Base Widget class Label Block Label Scroll Menu Checkbox Menu Button TextBox Text Block Additional widgets should be added in as additional_widgets/$WIDGET_NAME.py, importing this file and extending the base Widget class, or if appropriate one of the other core widgets. @author: Jakub Wlodek @created: 12-Aug-2019 Classes Class Doc Widget(py_cui.ui.UIElement) Top Level Widget Base Class Label(Widget) The most basic subclass of Widget. BlockLabel(Widget) A Variation of the label widget that renders a block of text. ScrollMenu(Widge A scroll menu widget. CheckBoxMenu(ScrollMenu) Extension of ScrollMenu that allows for multiple items to be selected at once. Button(Widget) Basic button widget. TextBox(Widge Widget for entering small single lines of text ScrollTextBlock(Widge Widget for editing large multi-line blocks of text Widget(py_cui.ui.UIElement) class Widget(py_cui.ui.UIElement) Top Level Widget Base Class Extended by all widgets. Contains base classes for handling key presses, drawing, and setting status bar text. Attributes Attribute Type Doc _grid py_cui.grid.Grid The parent grid object of the widget _row, _column int row and column position of the widget _row_span, _column_span int number of rows or columns spanned by the widget _selectable bool Flag that says if a widget can be selected _key_commands dict Dictionary mapping key codes to functions _text_color_rules List[py_cui.ColorRule] color rules to load into renderer when drawing widget Methods Method Doc add_key_command Maps a keycode to a function that will be executed when in focus mode update_key_command Maps a keycode to a function that will be executed when in focus mode, if key is already mapped add_text_color_rule Forces renderer to draw text using given color if text_condition_function returns True get_absolute_start_pos Gets the absolute position of the widget in characters. Override of base class function get_absolute_stop_pos Gets the absolute dimensions of the widget in characters. Override of base class function get_grid_cell Gets widget row, column in grid get_grid_cell_spans Gets widget row span, column span in grid is_selectable Checks if the widget is selectable _is_row_col_inside Checks if a particular row + column is inside the widget area _handle_key_press Base class function that handles all assigned key presses. _draw Base class draw class that checks if renderer is valid. init def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger, selectable = True) Initializer for base widget class Calss UIElement superclass initialzier, and then assigns widget to grid, along with row/column info and color rules and key commands add_key_command def add_key_command(self, key, command) Maps a keycode to a function that will be executed when in focus mode Parameters Parameter Type Doc key py_cui.keys.KEY ascii keycode used to map the key command function without args a non-argument function or lambda function to execute if in focus mode and key is pressed update_key_command def update_key_command(self, key, command) Maps a keycode to a function that will be executed when in focus mode, if key is already mapped Parameters Parameter Type Doc key py_cui.keys.KEY ascii keycode used to map the key command function without args a non-argument function or lambda function to execute if in focus mode and key is pressed add_text_color_rule def add_text_color_rule(self, regex, color, rule_type, match_type='line', region=[0,1], include_whitespace=False) Forces renderer to draw text using given color if text_condition_function returns True Parameters Parameter Type Doc regex str A string to check against the line for a given rule type color int a supported py_cui color value rule_type string A supported color rule type match_type='line' str sets match type. Can be 'line', 'regex', or 'region' region=[0,1] [int, int] A specified region to color if using match_type='region' include_whitespace bool if false, strip string before checking for match get_absolute_start_pos def get_absolute_start_pos(self) Gets the absolute position of the widget in characters. Override of base class function Returns Return Variable Type Doc x_pos, y_pos int position of widget in terminal get_absolute_stop_pos def get_absolute_stop_pos(self) Gets the absolute dimensions of the widget in characters. Override of base class function Returns Return Variable Type Doc width, height int dimensions of widget in terminal get_grid_cell def get_grid_cell(self) Gets widget row, column in grid Returns Return Variable Type Doc row, column int Initial row and column placement for widget in grid get_grid_cell_spans def get_grid_cell_spans(self) Gets widget row span, column span in grid Returns Return Variable Type Doc row_span, column_span int Initial row span and column span placement for widget in grid is_selectable def is_selectable(self) Checks if the widget is selectable Returns Return Variable Type Doc selectable bool True if selectable, false otherwise _is_row_col_inside def _is_row_col_inside(self, row, col) Checks if a particular row + column is inside the widget area Parameters Parameter Type Doc row, col int row and column position to check Returns Return Variable Type Doc is_inside bool True if row, col is within widget bounds, false otherwise _handle_key_press def _handle_key_press(self, key_pressed) Base class function that handles all assigned key presses. When overwriting this function, make sure to add a super()._handle_key_press(key_pressed) call, as this is required for user defined key command support Parameters Parameter Type Doc key_pressed int key code of key pressed _draw def _draw(self) Base class draw class that checks if renderer is valid. Should be called with super()._draw() in overrides. Also intializes color rules, so if not called color rules will not be applied Label(Widget) class Label(Widget) The most basic subclass of Widget. Simply displays one centered row of text. Has no unique attributes or methods Attributes Attribute Type Doc draw_border bool Toggle for drawing label border Methods Method Doc toggle_border Function that gives option to draw border around label _draw Override base draw class. init def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger) Initalizer for Label widget toggle_border def toggle_border(self) Function that gives option to draw border around label _draw def _draw(self) Override base draw class. Center text and draw it BlockLabel(Widget) class BlockLabel(Widget) A Variation of the label widget that renders a block of text. Attributes Attribute Type Doc lines list of str list of lines that make up block text center bool Decides whether or not label should be centered Methods Method Doc toggle_border Function that gives option to draw border around label _draw Override base draw class. init def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, center, logger) Initializer for blocklabel widget toggle_border def toggle_border(self) Function that gives option to draw border around label _draw def _draw(self) Override base draw class. Center text and draw it ScrollMenu(Widge class ScrollMenu(Widget, py_cui.ui.MenuImplementation) A scroll menu widget. Methods Method Doc _handle_key_press Override base class function. _draw Overrides base class draw function init def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger) Initializer for scroll menu. calls superclass initializers and sets help text _handle_key_press def _handle_key_press(self, key_pressed) Override base class function. UP_ARROW scrolls up, DOWN_ARROW scrolls down. Parameters Parameter Type Doc key_pressed int key code of key pressed _draw def _draw(self) Overrides base class draw function CheckBoxMenu(ScrollMenu) class CheckBoxMenu(ScrollMenu) Extension of ScrollMenu that allows for multiple items to be selected at once. Attributes Attribute Type Doc selected_item_list list of str List of checked items checked_char char Character to represent a checked item Methods Method Doc add_item Adds item to Checkbox add_item_list Adds list of items to the checkbox get Gets list of selected items from the checkbox mark_item_as_checked Function that marks an item as selected _handle_key_press Override of key presses. init def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger, checked_char) Initializer for CheckBoxMenu Widget. Builds on ScrollMenu add_item def add_item(self, item_text) Adds item to Checkbox Parameters Parameter Type Doc item_text str Menu item to add add_item_list def add_item_list(self, item_list) Adds list of items to the checkbox Parameters Parameter Type Doc item_list list of str Menu item list to add get def get(self) Gets list of selected items from the checkbox Returns Return Variable Type Doc selected_items list of str list of checked items mark_item_as_checked def mark_item_as_checked(self, text) Function that marks an item as selected Parameters Parameter Type Doc text str Mark item with text = text as checked _handle_key_press def _handle_key_press(self, key_pressed) Override of key presses. First, run the superclass function, scrolling should still work. Adds Enter command to toggle selection Parameters Parameter Type Doc key_pressed int key code of pressed key Button(Widget) class Button(Widget) Basic button widget. Allows for running a command function on Enter Attributes Attribute Type Doc command function A no-args function to run when the button is pressed. Methods Method Doc _handle_key_press Override of base class, adds ENTER listener that runs the button's command _draw Override of base class draw function init def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger, command) Initializer for Button Widget _handle_key_press def _handle_key_press(self, key_pressed) Override of base class, adds ENTER listener that runs the button's command Parameters Parameter Type Doc key_pressed int Key code of pressed key _draw def _draw(self) Override of base class draw function TextBox(Widge class TextBox(Widget, py_cui.ui.TextBoxImplementation) Widget for entering small single lines of text Methods Method Doc update_height_width Need to update all cursor positions on resize _handle_key_press Override of base handle key press function _draw Override of base draw function init def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger, initial_text, password) Initializer for TextBox widget. Uses TextBoxImplementation as base update_height_width def update_height_width(self) Need to update all cursor positions on resize _handle_key_press def _handle_key_press(self, key_pressed) Override of base handle key press function Parameters Parameter Type Doc key_pressed int key code of key pressed _draw def _draw(self) Override of base draw function ScrollTextBlock(Widge class ScrollTextBlock(Widget, py_cui.ui.TextBlockImplementation) Widget for editing large multi-line blocks of text Methods Method Doc update_height_width Function that updates the position of the text and cursor on resize _handle_key_press Override of base class handle key press function _draw Override of base class draw function init def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger, initial_text) Initializer for TextBlock Widget. Uses TextBlockImplementation as base update_height_width def update_height_width(self) Function that updates the position of the text and cursor on resize _handle_key_press def _handle_key_press(self, key_pressed) Override of base class handle key press function Parameters Parameter Type Doc key_pressed int key code of key pressed _draw def _draw(self) Override of base class draw function","title":"Widgets"},{"location":"DocstringGenerated/Widgets/#widgets","text":"File contatining all core widget classes for py_cui. Widgets are the basic building blocks of a user interface made with py_cui. This file contains classes for: Base Widget class Label Block Label Scroll Menu Checkbox Menu Button TextBox Text Block Additional widgets should be added in as additional_widgets/$WIDGET_NAME.py, importing this file and extending the base Widget class, or if appropriate one of the other core widgets. @author: Jakub Wlodek @created: 12-Aug-2019","title":"widgets"},{"location":"DocstringGenerated/Widgets/#classes","text":"Class Doc Widget(py_cui.ui.UIElement) Top Level Widget Base Class Label(Widget) The most basic subclass of Widget. BlockLabel(Widget) A Variation of the label widget that renders a block of text. ScrollMenu(Widge A scroll menu widget. CheckBoxMenu(ScrollMenu) Extension of ScrollMenu that allows for multiple items to be selected at once. Button(Widget) Basic button widget. TextBox(Widge Widget for entering small single lines of text ScrollTextBlock(Widge Widget for editing large multi-line blocks of text","title":"Classes"},{"location":"DocstringGenerated/Widgets/#widgetpy_cuiuiuielement","text":"class Widget(py_cui.ui.UIElement) Top Level Widget Base Class Extended by all widgets. Contains base classes for handling key presses, drawing, and setting status bar text.","title":"Widget(py_cui.ui.UIElement)"},{"location":"DocstringGenerated/Widgets/#attributes","text":"Attribute Type Doc _grid py_cui.grid.Grid The parent grid object of the widget _row, _column int row and column position of the widget _row_span, _column_span int number of rows or columns spanned by the widget _selectable bool Flag that says if a widget can be selected _key_commands dict Dictionary mapping key codes to functions _text_color_rules List[py_cui.ColorRule] color rules to load into renderer when drawing widget","title":"Attributes"},{"location":"DocstringGenerated/Widgets/#methods","text":"Method Doc add_key_command Maps a keycode to a function that will be executed when in focus mode update_key_command Maps a keycode to a function that will be executed when in focus mode, if key is already mapped add_text_color_rule Forces renderer to draw text using given color if text_condition_function returns True get_absolute_start_pos Gets the absolute position of the widget in characters. Override of base class function get_absolute_stop_pos Gets the absolute dimensions of the widget in characters. Override of base class function get_grid_cell Gets widget row, column in grid get_grid_cell_spans Gets widget row span, column span in grid is_selectable Checks if the widget is selectable _is_row_col_inside Checks if a particular row + column is inside the widget area _handle_key_press Base class function that handles all assigned key presses. _draw Base class draw class that checks if renderer is valid.","title":"Methods"},{"location":"DocstringGenerated/Widgets/#init","text":"def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger, selectable = True) Initializer for base widget class Calss UIElement superclass initialzier, and then assigns widget to grid, along with row/column info and color rules and key commands","title":"init"},{"location":"DocstringGenerated/Widgets/#add_key_command","text":"def add_key_command(self, key, command) Maps a keycode to a function that will be executed when in focus mode","title":"add_key_command"},{"location":"DocstringGenerated/Widgets/#parameters","text":"Parameter Type Doc key py_cui.keys.KEY ascii keycode used to map the key command function without args a non-argument function or lambda function to execute if in focus mode and key is pressed","title":"Parameters"},{"location":"DocstringGenerated/Widgets/#update_key_command","text":"def update_key_command(self, key, command) Maps a keycode to a function that will be executed when in focus mode, if key is already mapped","title":"update_key_command"},{"location":"DocstringGenerated/Widgets/#parameters_1","text":"Parameter Type Doc key py_cui.keys.KEY ascii keycode used to map the key command function without args a non-argument function or lambda function to execute if in focus mode and key is pressed","title":"Parameters"},{"location":"DocstringGenerated/Widgets/#add_text_color_rule","text":"def add_text_color_rule(self, regex, color, rule_type, match_type='line', region=[0,1], include_whitespace=False) Forces renderer to draw text using given color if text_condition_function returns True","title":"add_text_color_rule"},{"location":"DocstringGenerated/Widgets/#parameters_2","text":"Parameter Type Doc regex str A string to check against the line for a given rule type color int a supported py_cui color value rule_type string A supported color rule type match_type='line' str sets match type. Can be 'line', 'regex', or 'region' region=[0,1] [int, int] A specified region to color if using match_type='region' include_whitespace bool if false, strip string before checking for match","title":"Parameters"},{"location":"DocstringGenerated/Widgets/#get_absolute_start_pos","text":"def get_absolute_start_pos(self) Gets the absolute position of the widget in characters. Override of base class function","title":"get_absolute_start_pos"},{"location":"DocstringGenerated/Widgets/#returns","text":"Return Variable Type Doc x_pos, y_pos int position of widget in terminal","title":"Returns"},{"location":"DocstringGenerated/Widgets/#get_absolute_stop_pos","text":"def get_absolute_stop_pos(self) Gets the absolute dimensions of the widget in characters. Override of base class function","title":"get_absolute_stop_pos"},{"location":"DocstringGenerated/Widgets/#returns_1","text":"Return Variable Type Doc width, height int dimensions of widget in terminal","title":"Returns"},{"location":"DocstringGenerated/Widgets/#get_grid_cell","text":"def get_grid_cell(self) Gets widget row, column in grid","title":"get_grid_cell"},{"location":"DocstringGenerated/Widgets/#returns_2","text":"Return Variable Type Doc row, column int Initial row and column placement for widget in grid","title":"Returns"},{"location":"DocstringGenerated/Widgets/#get_grid_cell_spans","text":"def get_grid_cell_spans(self) Gets widget row span, column span in grid","title":"get_grid_cell_spans"},{"location":"DocstringGenerated/Widgets/#returns_3","text":"Return Variable Type Doc row_span, column_span int Initial row span and column span placement for widget in grid","title":"Returns"},{"location":"DocstringGenerated/Widgets/#is_selectable","text":"def is_selectable(self) Checks if the widget is selectable","title":"is_selectable"},{"location":"DocstringGenerated/Widgets/#returns_4","text":"Return Variable Type Doc selectable bool True if selectable, false otherwise","title":"Returns"},{"location":"DocstringGenerated/Widgets/#_is_row_col_inside","text":"def _is_row_col_inside(self, row, col) Checks if a particular row + column is inside the widget area","title":"_is_row_col_inside"},{"location":"DocstringGenerated/Widgets/#parameters_3","text":"Parameter Type Doc row, col int row and column position to check","title":"Parameters"},{"location":"DocstringGenerated/Widgets/#returns_5","text":"Return Variable Type Doc is_inside bool True if row, col is within widget bounds, false otherwise","title":"Returns"},{"location":"DocstringGenerated/Widgets/#_handle_key_press","text":"def _handle_key_press(self, key_pressed) Base class function that handles all assigned key presses. When overwriting this function, make sure to add a super()._handle_key_press(key_pressed) call, as this is required for user defined key command support","title":"_handle_key_press"},{"location":"DocstringGenerated/Widgets/#parameters_4","text":"Parameter Type Doc key_pressed int key code of key pressed","title":"Parameters"},{"location":"DocstringGenerated/Widgets/#_draw","text":"def _draw(self) Base class draw class that checks if renderer is valid. Should be called with super()._draw() in overrides. Also intializes color rules, so if not called color rules will not be applied","title":"_draw"},{"location":"DocstringGenerated/Widgets/#labelwidget","text":"class Label(Widget) The most basic subclass of Widget. Simply displays one centered row of text. Has no unique attributes or methods","title":"Label(Widget)"},{"location":"DocstringGenerated/Widgets/#attributes_1","text":"Attribute Type Doc draw_border bool Toggle for drawing label border","title":"Attributes"},{"location":"DocstringGenerated/Widgets/#methods_1","text":"Method Doc toggle_border Function that gives option to draw border around label _draw Override base draw class.","title":"Methods"},{"location":"DocstringGenerated/Widgets/#init_1","text":"def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger) Initalizer for Label widget","title":"init"},{"location":"DocstringGenerated/Widgets/#toggle_border","text":"def toggle_border(self) Function that gives option to draw border around label","title":"toggle_border"},{"location":"DocstringGenerated/Widgets/#_draw_1","text":"def _draw(self) Override base draw class. Center text and draw it","title":"_draw"},{"location":"DocstringGenerated/Widgets/#blocklabelwidget","text":"class BlockLabel(Widget) A Variation of the label widget that renders a block of text.","title":"BlockLabel(Widget)"},{"location":"DocstringGenerated/Widgets/#attributes_2","text":"Attribute Type Doc lines list of str list of lines that make up block text center bool Decides whether or not label should be centered","title":"Attributes"},{"location":"DocstringGenerated/Widgets/#methods_2","text":"Method Doc toggle_border Function that gives option to draw border around label _draw Override base draw class.","title":"Methods"},{"location":"DocstringGenerated/Widgets/#init_2","text":"def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, center, logger) Initializer for blocklabel widget","title":"init"},{"location":"DocstringGenerated/Widgets/#toggle_border_1","text":"def toggle_border(self) Function that gives option to draw border around label","title":"toggle_border"},{"location":"DocstringGenerated/Widgets/#_draw_2","text":"def _draw(self) Override base draw class. Center text and draw it","title":"_draw"},{"location":"DocstringGenerated/Widgets/#scrollmenuwidge","text":"class ScrollMenu(Widget, py_cui.ui.MenuImplementation) A scroll menu widget.","title":"ScrollMenu(Widge"},{"location":"DocstringGenerated/Widgets/#methods_3","text":"Method Doc _handle_key_press Override base class function. _draw Overrides base class draw function","title":"Methods"},{"location":"DocstringGenerated/Widgets/#init_3","text":"def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger) Initializer for scroll menu. calls superclass initializers and sets help text","title":"init"},{"location":"DocstringGenerated/Widgets/#_handle_key_press_1","text":"def _handle_key_press(self, key_pressed) Override base class function. UP_ARROW scrolls up, DOWN_ARROW scrolls down.","title":"_handle_key_press"},{"location":"DocstringGenerated/Widgets/#parameters_5","text":"Parameter Type Doc key_pressed int key code of key pressed","title":"Parameters"},{"location":"DocstringGenerated/Widgets/#_draw_3","text":"def _draw(self) Overrides base class draw function","title":"_draw"},{"location":"DocstringGenerated/Widgets/#checkboxmenuscrollmenu","text":"class CheckBoxMenu(ScrollMenu) Extension of ScrollMenu that allows for multiple items to be selected at once.","title":"CheckBoxMenu(ScrollMenu)"},{"location":"DocstringGenerated/Widgets/#attributes_3","text":"Attribute Type Doc selected_item_list list of str List of checked items checked_char char Character to represent a checked item","title":"Attributes"},{"location":"DocstringGenerated/Widgets/#methods_4","text":"Method Doc add_item Adds item to Checkbox add_item_list Adds list of items to the checkbox get Gets list of selected items from the checkbox mark_item_as_checked Function that marks an item as selected _handle_key_press Override of key presses.","title":"Methods"},{"location":"DocstringGenerated/Widgets/#init_4","text":"def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger, checked_char) Initializer for CheckBoxMenu Widget. Builds on ScrollMenu","title":"init"},{"location":"DocstringGenerated/Widgets/#add_item","text":"def add_item(self, item_text) Adds item to Checkbox","title":"add_item"},{"location":"DocstringGenerated/Widgets/#parameters_6","text":"Parameter Type Doc item_text str Menu item to add","title":"Parameters"},{"location":"DocstringGenerated/Widgets/#add_item_list","text":"def add_item_list(self, item_list) Adds list of items to the checkbox","title":"add_item_list"},{"location":"DocstringGenerated/Widgets/#parameters_7","text":"Parameter Type Doc item_list list of str Menu item list to add","title":"Parameters"},{"location":"DocstringGenerated/Widgets/#get","text":"def get(self) Gets list of selected items from the checkbox","title":"get"},{"location":"DocstringGenerated/Widgets/#returns_6","text":"Return Variable Type Doc selected_items list of str list of checked items","title":"Returns"},{"location":"DocstringGenerated/Widgets/#mark_item_as_checked","text":"def mark_item_as_checked(self, text) Function that marks an item as selected","title":"mark_item_as_checked"},{"location":"DocstringGenerated/Widgets/#parameters_8","text":"Parameter Type Doc text str Mark item with text = text as checked","title":"Parameters"},{"location":"DocstringGenerated/Widgets/#_handle_key_press_2","text":"def _handle_key_press(self, key_pressed) Override of key presses. First, run the superclass function, scrolling should still work. Adds Enter command to toggle selection","title":"_handle_key_press"},{"location":"DocstringGenerated/Widgets/#parameters_9","text":"Parameter Type Doc key_pressed int key code of pressed key","title":"Parameters"},{"location":"DocstringGenerated/Widgets/#buttonwidget","text":"class Button(Widget) Basic button widget. Allows for running a command function on Enter","title":"Button(Widget)"},{"location":"DocstringGenerated/Widgets/#attributes_4","text":"Attribute Type Doc command function A no-args function to run when the button is pressed.","title":"Attributes"},{"location":"DocstringGenerated/Widgets/#methods_5","text":"Method Doc _handle_key_press Override of base class, adds ENTER listener that runs the button's command _draw Override of base class draw function","title":"Methods"},{"location":"DocstringGenerated/Widgets/#init_5","text":"def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger, command) Initializer for Button Widget","title":"init"},{"location":"DocstringGenerated/Widgets/#_handle_key_press_3","text":"def _handle_key_press(self, key_pressed) Override of base class, adds ENTER listener that runs the button's command","title":"_handle_key_press"},{"location":"DocstringGenerated/Widgets/#parameters_10","text":"Parameter Type Doc key_pressed int Key code of pressed key","title":"Parameters"},{"location":"DocstringGenerated/Widgets/#_draw_4","text":"def _draw(self) Override of base class draw function","title":"_draw"},{"location":"DocstringGenerated/Widgets/#textboxwidge","text":"class TextBox(Widget, py_cui.ui.TextBoxImplementation) Widget for entering small single lines of text","title":"TextBox(Widge"},{"location":"DocstringGenerated/Widgets/#methods_6","text":"Method Doc update_height_width Need to update all cursor positions on resize _handle_key_press Override of base handle key press function _draw Override of base draw function","title":"Methods"},{"location":"DocstringGenerated/Widgets/#init_6","text":"def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger, initial_text, password) Initializer for TextBox widget. Uses TextBoxImplementation as base","title":"init"},{"location":"DocstringGenerated/Widgets/#update_height_width","text":"def update_height_width(self) Need to update all cursor positions on resize","title":"update_height_width"},{"location":"DocstringGenerated/Widgets/#_handle_key_press_4","text":"def _handle_key_press(self, key_pressed) Override of base handle key press function","title":"_handle_key_press"},{"location":"DocstringGenerated/Widgets/#parameters_11","text":"Parameter Type Doc key_pressed int key code of key pressed","title":"Parameters"},{"location":"DocstringGenerated/Widgets/#_draw_5","text":"def _draw(self) Override of base draw function","title":"_draw"},{"location":"DocstringGenerated/Widgets/#scrolltextblockwidge","text":"class ScrollTextBlock(Widget, py_cui.ui.TextBlockImplementation) Widget for editing large multi-line blocks of text","title":"ScrollTextBlock(Widge"},{"location":"DocstringGenerated/Widgets/#methods_7","text":"Method Doc update_height_width Function that updates the position of the text and cursor on resize _handle_key_press Override of base class handle key press function _draw Override of base class draw function","title":"Methods"},{"location":"DocstringGenerated/Widgets/#init_7","text":"def __init__(self, id, title, grid, row, column, row_span, column_span, padx, pady, logger, initial_text) Initializer for TextBlock Widget. Uses TextBlockImplementation as base","title":"init"},{"location":"DocstringGenerated/Widgets/#update_height_width_1","text":"def update_height_width(self) Function that updates the position of the text and cursor on resize","title":"update_height_width"},{"location":"DocstringGenerated/Widgets/#_handle_key_press_5","text":"def _handle_key_press(self, key_pressed) Override of base class handle key press function","title":"_handle_key_press"},{"location":"DocstringGenerated/Widgets/#parameters_12","text":"Parameter Type Doc key_pressed int key code of key pressed","title":"Parameters"},{"location":"DocstringGenerated/Widgets/#_draw_6","text":"def _draw(self) Override of base class draw function","title":"_draw"}]}